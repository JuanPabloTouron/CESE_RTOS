
F446RE_RTOS_A1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004684  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004854  08004854  00005854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048bc  080048bc  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080048bc  080048bc  000058bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048c4  080048c4  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048c4  080048c4  000058c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048c8  080048c8  000058c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080048cc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000401c  20000010  080048dc  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000402c  080048dc  0000602c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010121  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002abb  00000000  00000000  00016161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00018c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c27  00000000  00000000  00019bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229a6  00000000  00000000  0001a817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001214c  00000000  00000000  0003d1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6e8f  00000000  00000000  0004f309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126198  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004144  00000000  00000000  001261dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b6  00000000  00000000  0012a320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800483c 	.word	0x0800483c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800483c 	.word	0x0800483c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	4a07      	ldr	r2, [pc, #28]	@ (8000568 <vApplicationGetIdleTaskMemory+0x2c>)
 800054c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	4a06      	ldr	r2, [pc, #24]	@ (800056c <vApplicationGetIdleTaskMemory+0x30>)
 8000552:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2280      	movs	r2, #128	@ 0x80
 8000558:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	2000002c 	.word	0x2000002c
 800056c:	20000080 	.word	0x20000080

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b5b0      	push	{r4, r5, r7, lr}
 8000572:	b090      	sub	sp, #64	@ 0x40
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fa57 	bl	8000a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f841 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f89f 	bl	80006c0 <MX_GPIO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Binary_Sem */
  osSemaphoreDef(Binary_Sem);
 8000582:	2300      	movs	r3, #0
 8000584:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000586:	2300      	movs	r3, #0
 8000588:	63fb      	str	r3, [r7, #60]	@ 0x3c
  Binary_SemHandle = osSemaphoreCreate(osSemaphore(Binary_Sem), 1);
 800058a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800058e:	2101      	movs	r1, #1
 8000590:	4618      	mov	r0, r3
 8000592:	f001 fde0 	bl	8002156 <osSemaphoreCreate>
 8000596:	4603      	mov	r3, r0
 8000598:	4a14      	ldr	r2, [pc, #80]	@ (80005ec <main+0x7c>)
 800059a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1_App, osPriorityNormal, 0, 128);
 800059c:	4b14      	ldr	r3, [pc, #80]	@ (80005f0 <main+0x80>)
 800059e:	f107 041c 	add.w	r4, r7, #28
 80005a2:	461d      	mov	r5, r3
 80005a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80005b0:	f107 031c 	add.w	r3, r7, #28
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fd6d 	bl	8002096 <osThreadCreate>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a0d      	ldr	r2, [pc, #52]	@ (80005f4 <main+0x84>)
 80005c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_App, osPriorityIdle, 0, 128);
 80005c2:	4b0d      	ldr	r3, [pc, #52]	@ (80005f8 <main+0x88>)
 80005c4:	463c      	mov	r4, r7
 80005c6:	461d      	mov	r5, r3
 80005c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80005d4:	463b      	mov	r3, r7
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fd5c 	bl	8002096 <osThreadCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a06      	ldr	r2, [pc, #24]	@ (80005fc <main+0x8c>)
 80005e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e4:	f001 fd50 	bl	8002088 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <main+0x78>
 80005ec:	20000288 	.word	0x20000288
 80005f0:	0800485c 	.word	0x0800485c
 80005f4:	20000280 	.word	0x20000280
 80005f8:	08004880 	.word	0x08004880
 80005fc:	20000284 	.word	0x20000284

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	@ 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2234      	movs	r2, #52	@ 0x34
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f004 f8da 	bl	80047c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b23      	ldr	r3, [pc, #140]	@ (80006b8 <SystemClock_Config+0xb8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	4a22      	ldr	r2, [pc, #136]	@ (80006b8 <SystemClock_Config+0xb8>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	@ 0x40
 8000634:	4b20      	ldr	r3, [pc, #128]	@ (80006b8 <SystemClock_Config+0xb8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000640:	2300      	movs	r3, #0
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <SystemClock_Config+0xbc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800064c:	4a1b      	ldr	r2, [pc, #108]	@ (80006bc <SystemClock_Config+0xbc>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b19      	ldr	r3, [pc, #100]	@ (80006bc <SystemClock_Config+0xbc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066c:	2300      	movs	r3, #0
 800066e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4618      	mov	r0, r3
 8000676:	f000 ffa3 	bl	80015c0 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000680:	f000 f8c4 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fcac 	bl	8000ffc <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006aa:	f000 f8af 	bl	800080c <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	@ 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <MX_GPIO_Init+0xa8>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a22      	ldr	r2, [pc, #136]	@ (8000768 <MX_GPIO_Init+0xa8>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <MX_GPIO_Init+0xa8>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_GPIO_Init+0xa8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a1b      	ldr	r2, [pc, #108]	@ (8000768 <MX_GPIO_Init+0xa8>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <MX_GPIO_Init+0xa8>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2120      	movs	r1, #32
 8000712:	4816      	ldr	r0, [pc, #88]	@ (800076c <MX_GPIO_Init+0xac>)
 8000714:	f000 fc40 	bl	8000f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Push_Button_Pin */
  GPIO_InitStruct.Pin = Push_Button_Pin;
 8000718:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800071c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800071e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Push_Button_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4619      	mov	r1, r3
 800072e:	4810      	ldr	r0, [pc, #64]	@ (8000770 <MX_GPIO_Init+0xb0>)
 8000730:	f000 fa9e 	bl	8000c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000734:	2320      	movs	r3, #32
 8000736:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	4619      	mov	r1, r3
 800074a:	4808      	ldr	r0, [pc, #32]	@ (800076c <MX_GPIO_Init+0xac>)
 800074c:	f000 fa90 	bl	8000c70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	2105      	movs	r1, #5
 8000754:	2028      	movs	r0, #40	@ 0x28
 8000756:	f000 fa61 	bl	8000c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800075a:	2028      	movs	r0, #40	@ 0x28
 800075c:	f000 fa7a 	bl	8000c54 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000760:	bf00      	nop
 8000762:	3720      	adds	r7, #32
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40020000 	.word	0x40020000
 8000770:	40020800 	.word	0x40020800

08000774 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	80fb      	strh	r3, [r7, #6]
	if(Push_Button_Pin == GPIO_Pin)
 800077e:	88fb      	ldrh	r3, [r7, #6]
 8000780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000784:	d104      	bne.n	8000790 <HAL_GPIO_EXTI_Callback+0x1c>
		osSemaphoreRelease(Binary_SemHandle);
 8000786:	4b04      	ldr	r3, [pc, #16]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x24>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fd64 	bl	8002258 <osSemaphoreRelease>
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000288 	.word	0x20000288

0800079c <Task1_App>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_App */
void Task1_App(void const * argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2120      	movs	r1, #32
 80007a8:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <Task1_App+0x24>)
 80007aa:	f000 fbf5 	bl	8000f98 <HAL_GPIO_WritePin>
	  osSemaphoreWait(Binary_SemHandle,osWaitForever);
 80007ae:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <Task1_App+0x28>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f04f 31ff 	mov.w	r1, #4294967295
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fd00 	bl	80021bc <osSemaphoreWait>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80007bc:	bf00      	nop
 80007be:	e7f1      	b.n	80007a4 <Task1_App+0x8>
 80007c0:	40020000 	.word	0x40020000
 80007c4:	20000288 	.word	0x20000288

080007c8 <Task2_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_App */
void Task2_App(void const * argument)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_App */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2120      	movs	r1, #32
 80007d4:	4803      	ldr	r0, [pc, #12]	@ (80007e4 <Task2_App+0x1c>)
 80007d6:	f000 fbdf 	bl	8000f98 <HAL_GPIO_WritePin>
	  osDelay(1);
 80007da:	2001      	movs	r0, #1
 80007dc:	f001 fca7 	bl	800212e <osDelay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007e0:	bf00      	nop
 80007e2:	e7f5      	b.n	80007d0 <Task2_App+0x8>
 80007e4:	40020000 	.word	0x40020000

080007e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a04      	ldr	r2, [pc, #16]	@ (8000808 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d101      	bne.n	80007fe <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80007fa:	f000 f937 	bl	8000a6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40010000 	.word	0x40010000

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <Error_Handler+0x8>

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_MspInit+0x54>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000826:	4a11      	ldr	r2, [pc, #68]	@ (800086c <HAL_MspInit+0x54>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800082c:	6453      	str	r3, [r2, #68]	@ 0x44
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <HAL_MspInit+0x54>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <HAL_MspInit+0x54>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000842:	4a0a      	ldr	r2, [pc, #40]	@ (800086c <HAL_MspInit+0x54>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000848:	6413      	str	r3, [r2, #64]	@ 0x40
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <HAL_MspInit+0x54>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	210f      	movs	r1, #15
 800085a:	f06f 0001 	mvn.w	r0, #1
 800085e:	f000 f9dd 	bl	8000c1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800

08000870 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	@ 0x30
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	4b2e      	ldr	r3, [pc, #184]	@ (8000940 <HAL_InitTick+0xd0>)
 8000886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000888:	4a2d      	ldr	r2, [pc, #180]	@ (8000940 <HAL_InitTick+0xd0>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000890:	4b2b      	ldr	r3, [pc, #172]	@ (8000940 <HAL_InitTick+0xd0>)
 8000892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800089c:	f107 020c 	add.w	r2, r7, #12
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	4611      	mov	r1, r2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 fcae 	bl	8001208 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008ac:	f000 fc98 	bl	80011e0 <HAL_RCC_GetPCLK2Freq>
 80008b0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008b4:	4a23      	ldr	r2, [pc, #140]	@ (8000944 <HAL_InitTick+0xd4>)
 80008b6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ba:	0c9b      	lsrs	r3, r3, #18
 80008bc:	3b01      	subs	r3, #1
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008c0:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <HAL_InitTick+0xd8>)
 80008c2:	4a22      	ldr	r2, [pc, #136]	@ (800094c <HAL_InitTick+0xdc>)
 80008c4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008c6:	4b20      	ldr	r3, [pc, #128]	@ (8000948 <HAL_InitTick+0xd8>)
 80008c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000948 <HAL_InitTick+0xd8>)
 80008d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <HAL_InitTick+0xd8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008da:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <HAL_InitTick+0xd8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e0:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <HAL_InitTick+0xd8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008e6:	4818      	ldr	r0, [pc, #96]	@ (8000948 <HAL_InitTick+0xd8>)
 80008e8:	f001 f908 	bl	8001afc <HAL_TIM_Base_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80008f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d11b      	bne.n	8000932 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008fa:	4813      	ldr	r0, [pc, #76]	@ (8000948 <HAL_InitTick+0xd8>)
 80008fc:	f001 f958 	bl	8001bb0 <HAL_TIM_Base_Start_IT>
 8000900:	4603      	mov	r3, r0
 8000902:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800090a:	2b00      	cmp	r3, #0
 800090c:	d111      	bne.n	8000932 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800090e:	2019      	movs	r0, #25
 8000910:	f000 f9a0 	bl	8000c54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b0f      	cmp	r3, #15
 8000918:	d808      	bhi.n	800092c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800091a:	2200      	movs	r2, #0
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	2019      	movs	r0, #25
 8000920:	f000 f97c 	bl	8000c1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000924:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <HAL_InitTick+0xe0>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6013      	str	r3, [r2, #0]
 800092a:	e002      	b.n	8000932 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000932:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000936:	4618      	mov	r0, r3
 8000938:	3730      	adds	r7, #48	@ 0x30
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	431bde83 	.word	0x431bde83
 8000948:	2000028c 	.word	0x2000028c
 800094c:	40010000 	.word	0x40010000
 8000950:	20000004 	.word	0x20000004

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <NMI_Handler+0x4>

0800095c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <MemManage_Handler+0x4>

0800096c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <UsageFault_Handler+0x4>

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000990:	4802      	ldr	r0, [pc, #8]	@ (800099c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000992:	f001 f97d 	bl	8001c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000028c 	.word	0x2000028c

080009a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Push_Button_Pin);
 80009a4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009a8:	f000 fb10 	bl	8000fcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <SystemInit+0x20>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ba:	4a05      	ldr	r2, [pc, #20]	@ (80009d0 <SystemInit+0x20>)
 80009bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009d8:	f7ff ffea 	bl	80009b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009de:	490d      	ldr	r1, [pc, #52]	@ (8000a14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a20 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a02:	f003 fee9 	bl	80047d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a06:	f7ff fdb3 	bl	8000570 <main>
  bx  lr    
 8000a0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a14:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a18:	080048cc 	.word	0x080048cc
  ldr r2, =_sbss
 8000a1c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a20:	2000402c 	.word	0x2000402c

08000a24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC_IRQHandler>
	...

08000a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0d      	ldr	r2, [pc, #52]	@ (8000a68 <HAL_Init+0x40>)
 8000a32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a38:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <HAL_Init+0x40>)
 8000a3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a07      	ldr	r2, [pc, #28]	@ (8000a68 <HAL_Init+0x40>)
 8000a4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a50:	2003      	movs	r0, #3
 8000a52:	f000 f8d8 	bl	8000c06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a56:	200f      	movs	r0, #15
 8000a58:	f7ff ff0a 	bl	8000870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5c:	f7ff fedc 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023c00 	.word	0x40023c00

08000a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <HAL_IncTick+0x20>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_IncTick+0x24>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <HAL_IncTick+0x24>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	200002d4 	.word	0x200002d4

08000a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;
 8000a98:	4b03      	ldr	r3, [pc, #12]	@ (8000aa8 <HAL_GetTick+0x14>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	200002d4 	.word	0x200002d4

08000aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ade:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	60d3      	str	r3, [r2, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db0b      	blt.n	8000b3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f003 021f 	and.w	r2, r3, #31
 8000b28:	4907      	ldr	r1, [pc, #28]	@ (8000b48 <__NVIC_EnableIRQ+0x38>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	095b      	lsrs	r3, r3, #5
 8000b30:	2001      	movs	r0, #1
 8000b32:	fa00 f202 	lsl.w	r2, r0, r2
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000e100 	.word	0xe000e100

08000b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db0a      	blt.n	8000b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	490c      	ldr	r1, [pc, #48]	@ (8000b98 <__NVIC_SetPriority+0x4c>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	0112      	lsls	r2, r2, #4
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	440b      	add	r3, r1
 8000b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b74:	e00a      	b.n	8000b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4908      	ldr	r1, [pc, #32]	@ (8000b9c <__NVIC_SetPriority+0x50>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	3b04      	subs	r3, #4
 8000b84:	0112      	lsls	r2, r2, #4
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	440b      	add	r3, r1
 8000b8a:	761a      	strb	r2, [r3, #24]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000e100 	.word	0xe000e100
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	@ 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	f1c3 0307 	rsb	r3, r3, #7
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	bf28      	it	cs
 8000bbe:	2304      	movcs	r3, #4
 8000bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	2b06      	cmp	r3, #6
 8000bc8:	d902      	bls.n	8000bd0 <NVIC_EncodePriority+0x30>
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3b03      	subs	r3, #3
 8000bce:	e000      	b.n	8000bd2 <NVIC_EncodePriority+0x32>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43da      	mvns	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43d9      	mvns	r1, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	4313      	orrs	r3, r2
         );
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3724      	adds	r7, #36	@ 0x24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ff4c 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c2e:	f7ff ff61 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	68b9      	ldr	r1, [r7, #8]
 8000c38:	6978      	ldr	r0, [r7, #20]
 8000c3a:	f7ff ffb1 	bl	8000ba0 <NVIC_EncodePriority>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c44:	4611      	mov	r1, r2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff80 	bl	8000b4c <__NVIC_SetPriority>
}
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff54 	bl	8000b10 <__NVIC_EnableIRQ>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	@ 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
 8000c8a:	e165      	b.n	8000f58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	f040 8154 	bne.w	8000f52 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 0303 	and.w	r3, r3, #3
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d005      	beq.n	8000cc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d130      	bne.n	8000d24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	2203      	movs	r2, #3
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	091b      	lsrs	r3, r3, #4
 8000d0e:	f003 0201 	and.w	r2, r3, #1
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	d017      	beq.n	8000d60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	689a      	ldr	r2, [r3, #8]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d123      	bne.n	8000db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	08da      	lsrs	r2, r3, #3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3208      	adds	r2, #8
 8000d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	220f      	movs	r2, #15
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	691a      	ldr	r2, [r3, #16]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	08da      	lsrs	r2, r3, #3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3208      	adds	r2, #8
 8000dae:	69b9      	ldr	r1, [r7, #24]
 8000db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0203 	and.w	r2, r3, #3
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f000 80ae 	beq.w	8000f52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b5d      	ldr	r3, [pc, #372]	@ (8000f70 <HAL_GPIO_Init+0x300>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfe:	4a5c      	ldr	r2, [pc, #368]	@ (8000f70 <HAL_GPIO_Init+0x300>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e06:	4b5a      	ldr	r3, [pc, #360]	@ (8000f70 <HAL_GPIO_Init+0x300>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e12:	4a58      	ldr	r2, [pc, #352]	@ (8000f74 <HAL_GPIO_Init+0x304>)
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3302      	adds	r3, #2
 8000e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	220f      	movs	r2, #15
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4f      	ldr	r2, [pc, #316]	@ (8000f78 <HAL_GPIO_Init+0x308>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d025      	beq.n	8000e8a <HAL_GPIO_Init+0x21a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4e      	ldr	r2, [pc, #312]	@ (8000f7c <HAL_GPIO_Init+0x30c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01f      	beq.n	8000e86 <HAL_GPIO_Init+0x216>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4d      	ldr	r2, [pc, #308]	@ (8000f80 <HAL_GPIO_Init+0x310>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d019      	beq.n	8000e82 <HAL_GPIO_Init+0x212>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4c      	ldr	r2, [pc, #304]	@ (8000f84 <HAL_GPIO_Init+0x314>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d013      	beq.n	8000e7e <HAL_GPIO_Init+0x20e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4b      	ldr	r2, [pc, #300]	@ (8000f88 <HAL_GPIO_Init+0x318>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00d      	beq.n	8000e7a <HAL_GPIO_Init+0x20a>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4a      	ldr	r2, [pc, #296]	@ (8000f8c <HAL_GPIO_Init+0x31c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d007      	beq.n	8000e76 <HAL_GPIO_Init+0x206>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a49      	ldr	r2, [pc, #292]	@ (8000f90 <HAL_GPIO_Init+0x320>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_GPIO_Init+0x202>
 8000e6e:	2306      	movs	r3, #6
 8000e70:	e00c      	b.n	8000e8c <HAL_GPIO_Init+0x21c>
 8000e72:	2307      	movs	r3, #7
 8000e74:	e00a      	b.n	8000e8c <HAL_GPIO_Init+0x21c>
 8000e76:	2305      	movs	r3, #5
 8000e78:	e008      	b.n	8000e8c <HAL_GPIO_Init+0x21c>
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	e006      	b.n	8000e8c <HAL_GPIO_Init+0x21c>
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e004      	b.n	8000e8c <HAL_GPIO_Init+0x21c>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e002      	b.n	8000e8c <HAL_GPIO_Init+0x21c>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <HAL_GPIO_Init+0x21c>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	69fa      	ldr	r2, [r7, #28]
 8000e8e:	f002 0203 	and.w	r2, r2, #3
 8000e92:	0092      	lsls	r2, r2, #2
 8000e94:	4093      	lsls	r3, r2
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e9c:	4935      	ldr	r1, [pc, #212]	@ (8000f74 <HAL_GPIO_Init+0x304>)
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eaa:	4b3a      	ldr	r3, [pc, #232]	@ (8000f94 <HAL_GPIO_Init+0x324>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ece:	4a31      	ldr	r2, [pc, #196]	@ (8000f94 <HAL_GPIO_Init+0x324>)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ed4:	4b2f      	ldr	r3, [pc, #188]	@ (8000f94 <HAL_GPIO_Init+0x324>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ef8:	4a26      	ldr	r2, [pc, #152]	@ (8000f94 <HAL_GPIO_Init+0x324>)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000efe:	4b25      	ldr	r3, [pc, #148]	@ (8000f94 <HAL_GPIO_Init+0x324>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f22:	4a1c      	ldr	r2, [pc, #112]	@ (8000f94 <HAL_GPIO_Init+0x324>)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <HAL_GPIO_Init+0x324>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f4c:	4a11      	ldr	r2, [pc, #68]	@ (8000f94 <HAL_GPIO_Init+0x324>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3301      	adds	r3, #1
 8000f56:	61fb      	str	r3, [r7, #28]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	2b0f      	cmp	r3, #15
 8000f5c:	f67f ae96 	bls.w	8000c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3724      	adds	r7, #36	@ 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40013800 	.word	0x40013800
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	40020800 	.word	0x40020800
 8000f84:	40020c00 	.word	0x40020c00
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40021400 	.word	0x40021400
 8000f90:	40021800 	.word	0x40021800
 8000f94:	40013c00 	.word	0x40013c00

08000f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fa8:	787b      	ldrb	r3, [r7, #1]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fb4:	e003      	b.n	8000fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fb6:	887b      	ldrh	r3, [r7, #2]
 8000fb8:	041a      	lsls	r2, r3, #16
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	619a      	str	r2, [r3, #24]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000fd6:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d006      	beq.n	8000ff0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fe2:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fbc2 	bl	8000774 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40013c00 	.word	0x40013c00

08000ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e0cc      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001010:	4b68      	ldr	r3, [pc, #416]	@ (80011b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 030f 	and.w	r3, r3, #15
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	d90c      	bls.n	8001038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800101e:	4b65      	ldr	r3, [pc, #404]	@ (80011b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001026:	4b63      	ldr	r3, [pc, #396]	@ (80011b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d001      	beq.n	8001038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e0b8      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d020      	beq.n	8001086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001050:	4b59      	ldr	r3, [pc, #356]	@ (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	4a58      	ldr	r2, [pc, #352]	@ (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001056:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800105a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001068:	4b53      	ldr	r3, [pc, #332]	@ (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	4a52      	ldr	r2, [pc, #328]	@ (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800106e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001074:	4b50      	ldr	r3, [pc, #320]	@ (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	494d      	ldr	r1, [pc, #308]	@ (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001082:	4313      	orrs	r3, r2
 8001084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	d044      	beq.n	800111c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d107      	bne.n	80010aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109a:	4b47      	ldr	r3, [pc, #284]	@ (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d119      	bne.n	80010da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e07f      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d003      	beq.n	80010ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d107      	bne.n	80010ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ba:	4b3f      	ldr	r3, [pc, #252]	@ (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d109      	bne.n	80010da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e06f      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ca:	4b3b      	ldr	r3, [pc, #236]	@ (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e067      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010da:	4b37      	ldr	r3, [pc, #220]	@ (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f023 0203 	bic.w	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	4934      	ldr	r1, [pc, #208]	@ (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010ec:	f7ff fcd2 	bl	8000a94 <HAL_GetTick>
 80010f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010f2:	e00a      	b.n	800110a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010f4:	f7ff fcce 	bl	8000a94 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001102:	4293      	cmp	r3, r2
 8001104:	d901      	bls.n	800110a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e04f      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800110a:	4b2b      	ldr	r3, [pc, #172]	@ (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 020c 	and.w	r2, r3, #12
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	429a      	cmp	r2, r3
 800111a:	d1eb      	bne.n	80010f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800111c:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <HAL_RCC_ClockConfig+0x1b8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 030f 	and.w	r3, r3, #15
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d20c      	bcs.n	8001144 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112a:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <HAL_RCC_ClockConfig+0x1b8>)
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001132:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	429a      	cmp	r2, r3
 800113e:	d001      	beq.n	8001144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e032      	b.n	80011aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b00      	cmp	r3, #0
 800114e:	d008      	beq.n	8001162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001150:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	4916      	ldr	r1, [pc, #88]	@ (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	4313      	orrs	r3, r2
 8001160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	2b00      	cmp	r3, #0
 800116c:	d009      	beq.n	8001182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800116e:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	490e      	ldr	r1, [pc, #56]	@ (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	4313      	orrs	r3, r2
 8001180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001182:	f000 f873 	bl	800126c <HAL_RCC_GetSysClockFreq>
 8001186:	4602      	mov	r2, r0
 8001188:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	091b      	lsrs	r3, r3, #4
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	490a      	ldr	r1, [pc, #40]	@ (80011bc <HAL_RCC_ClockConfig+0x1c0>)
 8001194:	5ccb      	ldrb	r3, [r1, r3]
 8001196:	fa22 f303 	lsr.w	r3, r2, r3
 800119a:	4a09      	ldr	r2, [pc, #36]	@ (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <HAL_RCC_ClockConfig+0x1c8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fb64 	bl	8000870 <HAL_InitTick>

  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023c00 	.word	0x40023c00
 80011b8:	40023800 	.word	0x40023800
 80011bc:	080048a4 	.word	0x080048a4
 80011c0:	20000000 	.word	0x20000000
 80011c4:	20000004 	.word	0x20000004

080011c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011cc:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <HAL_RCC_GetHCLKFreq+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000000 	.word	0x20000000

080011e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80011e4:	f7ff fff0 	bl	80011c8 <HAL_RCC_GetHCLKFreq>
 80011e8:	4602      	mov	r2, r0
 80011ea:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	0b5b      	lsrs	r3, r3, #13
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	4903      	ldr	r1, [pc, #12]	@ (8001204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80011f6:	5ccb      	ldrb	r3, [r1, r3]
 80011f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	080048b4 	.word	0x080048b4

08001208 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	220f      	movs	r2, #15
 8001216:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <HAL_RCC_GetClockConfig+0x5c>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 0203 	and.w	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <HAL_RCC_GetClockConfig+0x5c>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001230:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <HAL_RCC_GetClockConfig+0x5c>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800123c:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <HAL_RCC_GetClockConfig+0x5c>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	08db      	lsrs	r3, r3, #3
 8001242:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800124a:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <HAL_RCC_GetClockConfig+0x60>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 020f 	and.w	r2, r3, #15
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	601a      	str	r2, [r3, #0]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40023c00 	.word	0x40023c00

0800126c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800126c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001270:	b0a6      	sub	sp, #152	@ 0x98
 8001272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800127a:	2300      	movs	r3, #0
 800127c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001292:	4bc8      	ldr	r3, [pc, #800]	@ (80015b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b0c      	cmp	r3, #12
 800129c:	f200 817e 	bhi.w	800159c <HAL_RCC_GetSysClockFreq+0x330>
 80012a0:	a201      	add	r2, pc, #4	@ (adr r2, 80012a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80012a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a6:	bf00      	nop
 80012a8:	080012dd 	.word	0x080012dd
 80012ac:	0800159d 	.word	0x0800159d
 80012b0:	0800159d 	.word	0x0800159d
 80012b4:	0800159d 	.word	0x0800159d
 80012b8:	080012e5 	.word	0x080012e5
 80012bc:	0800159d 	.word	0x0800159d
 80012c0:	0800159d 	.word	0x0800159d
 80012c4:	0800159d 	.word	0x0800159d
 80012c8:	080012ed 	.word	0x080012ed
 80012cc:	0800159d 	.word	0x0800159d
 80012d0:	0800159d 	.word	0x0800159d
 80012d4:	0800159d 	.word	0x0800159d
 80012d8:	08001457 	.word	0x08001457
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012dc:	4bb6      	ldr	r3, [pc, #728]	@ (80015b8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80012de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80012e2:	e15f      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012e4:	4bb5      	ldr	r3, [pc, #724]	@ (80015bc <HAL_RCC_GetSysClockFreq+0x350>)
 80012e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80012ea:	e15b      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012ec:	4bb1      	ldr	r3, [pc, #708]	@ (80015b4 <HAL_RCC_GetSysClockFreq+0x348>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012f8:	4bae      	ldr	r3, [pc, #696]	@ (80015b4 <HAL_RCC_GetSysClockFreq+0x348>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d031      	beq.n	8001368 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001304:	4bab      	ldr	r3, [pc, #684]	@ (80015b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	099b      	lsrs	r3, r3, #6
 800130a:	2200      	movs	r2, #0
 800130c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800130e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001310:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001316:	663b      	str	r3, [r7, #96]	@ 0x60
 8001318:	2300      	movs	r3, #0
 800131a:	667b      	str	r3, [r7, #100]	@ 0x64
 800131c:	4ba7      	ldr	r3, [pc, #668]	@ (80015bc <HAL_RCC_GetSysClockFreq+0x350>)
 800131e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001322:	462a      	mov	r2, r5
 8001324:	fb03 f202 	mul.w	r2, r3, r2
 8001328:	2300      	movs	r3, #0
 800132a:	4621      	mov	r1, r4
 800132c:	fb01 f303 	mul.w	r3, r1, r3
 8001330:	4413      	add	r3, r2
 8001332:	4aa2      	ldr	r2, [pc, #648]	@ (80015bc <HAL_RCC_GetSysClockFreq+0x350>)
 8001334:	4621      	mov	r1, r4
 8001336:	fba1 1202 	umull	r1, r2, r1, r2
 800133a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800133c:	460a      	mov	r2, r1
 800133e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001340:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001342:	4413      	add	r3, r2
 8001344:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001346:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800134a:	2200      	movs	r2, #0
 800134c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800134e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001350:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001354:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001358:	f7fe ff5a 	bl	8000210 <__aeabi_uldivmod>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4613      	mov	r3, r2
 8001362:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001366:	e064      	b.n	8001432 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001368:	4b92      	ldr	r3, [pc, #584]	@ (80015b4 <HAL_RCC_GetSysClockFreq+0x348>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	099b      	lsrs	r3, r3, #6
 800136e:	2200      	movs	r2, #0
 8001370:	653b      	str	r3, [r7, #80]	@ 0x50
 8001372:	657a      	str	r2, [r7, #84]	@ 0x54
 8001374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800137a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800137c:	2300      	movs	r3, #0
 800137e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001380:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001384:	4622      	mov	r2, r4
 8001386:	462b      	mov	r3, r5
 8001388:	f04f 0000 	mov.w	r0, #0
 800138c:	f04f 0100 	mov.w	r1, #0
 8001390:	0159      	lsls	r1, r3, #5
 8001392:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001396:	0150      	lsls	r0, r2, #5
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4621      	mov	r1, r4
 800139e:	1a51      	subs	r1, r2, r1
 80013a0:	6139      	str	r1, [r7, #16]
 80013a2:	4629      	mov	r1, r5
 80013a4:	eb63 0301 	sbc.w	r3, r3, r1
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80013b6:	4659      	mov	r1, fp
 80013b8:	018b      	lsls	r3, r1, #6
 80013ba:	4651      	mov	r1, sl
 80013bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013c0:	4651      	mov	r1, sl
 80013c2:	018a      	lsls	r2, r1, #6
 80013c4:	4651      	mov	r1, sl
 80013c6:	ebb2 0801 	subs.w	r8, r2, r1
 80013ca:	4659      	mov	r1, fp
 80013cc:	eb63 0901 	sbc.w	r9, r3, r1
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013e4:	4690      	mov	r8, r2
 80013e6:	4699      	mov	r9, r3
 80013e8:	4623      	mov	r3, r4
 80013ea:	eb18 0303 	adds.w	r3, r8, r3
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	462b      	mov	r3, r5
 80013f2:	eb49 0303 	adc.w	r3, r9, r3
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001404:	4629      	mov	r1, r5
 8001406:	028b      	lsls	r3, r1, #10
 8001408:	4621      	mov	r1, r4
 800140a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800140e:	4621      	mov	r1, r4
 8001410:	028a      	lsls	r2, r1, #10
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800141a:	2200      	movs	r2, #0
 800141c:	643b      	str	r3, [r7, #64]	@ 0x40
 800141e:	647a      	str	r2, [r7, #68]	@ 0x44
 8001420:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001424:	f7fe fef4 	bl	8000210 <__aeabi_uldivmod>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4613      	mov	r3, r2
 800142e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001432:	4b60      	ldr	r3, [pc, #384]	@ (80015b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	0c1b      	lsrs	r3, r3, #16
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	3301      	adds	r3, #1
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001444:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001448:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800144c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001450:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001454:	e0a6      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001456:	4b57      	ldr	r3, [pc, #348]	@ (80015b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800145e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001462:	4b54      	ldr	r3, [pc, #336]	@ (80015b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d02a      	beq.n	80014c4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800146e:	4b51      	ldr	r3, [pc, #324]	@ (80015b4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	099b      	lsrs	r3, r3, #6
 8001474:	2200      	movs	r2, #0
 8001476:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001478:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800147a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800147c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001480:	2100      	movs	r1, #0
 8001482:	4b4e      	ldr	r3, [pc, #312]	@ (80015bc <HAL_RCC_GetSysClockFreq+0x350>)
 8001484:	fb03 f201 	mul.w	r2, r3, r1
 8001488:	2300      	movs	r3, #0
 800148a:	fb00 f303 	mul.w	r3, r0, r3
 800148e:	4413      	add	r3, r2
 8001490:	4a4a      	ldr	r2, [pc, #296]	@ (80015bc <HAL_RCC_GetSysClockFreq+0x350>)
 8001492:	fba0 1202 	umull	r1, r2, r0, r2
 8001496:	677a      	str	r2, [r7, #116]	@ 0x74
 8001498:	460a      	mov	r2, r1
 800149a:	673a      	str	r2, [r7, #112]	@ 0x70
 800149c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800149e:	4413      	add	r3, r2
 80014a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80014a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80014a6:	2200      	movs	r2, #0
 80014a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80014aa:	637a      	str	r2, [r7, #52]	@ 0x34
 80014ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80014b0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80014b4:	f7fe feac 	bl	8000210 <__aeabi_uldivmod>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4613      	mov	r3, r2
 80014be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80014c2:	e05b      	b.n	800157c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014c4:	4b3b      	ldr	r3, [pc, #236]	@ (80015b4 <HAL_RCC_GetSysClockFreq+0x348>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	099b      	lsrs	r3, r3, #6
 80014ca:	2200      	movs	r2, #0
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80014d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014d6:	623b      	str	r3, [r7, #32]
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24
 80014dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80014e0:	4642      	mov	r2, r8
 80014e2:	464b      	mov	r3, r9
 80014e4:	f04f 0000 	mov.w	r0, #0
 80014e8:	f04f 0100 	mov.w	r1, #0
 80014ec:	0159      	lsls	r1, r3, #5
 80014ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014f2:	0150      	lsls	r0, r2, #5
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4641      	mov	r1, r8
 80014fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80014fe:	4649      	mov	r1, r9
 8001500:	eb63 0b01 	sbc.w	fp, r3, r1
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001510:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001514:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001518:	ebb2 040a 	subs.w	r4, r2, sl
 800151c:	eb63 050b 	sbc.w	r5, r3, fp
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	00eb      	lsls	r3, r5, #3
 800152a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800152e:	00e2      	lsls	r2, r4, #3
 8001530:	4614      	mov	r4, r2
 8001532:	461d      	mov	r5, r3
 8001534:	4643      	mov	r3, r8
 8001536:	18e3      	adds	r3, r4, r3
 8001538:	603b      	str	r3, [r7, #0]
 800153a:	464b      	mov	r3, r9
 800153c:	eb45 0303 	adc.w	r3, r5, r3
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800154e:	4629      	mov	r1, r5
 8001550:	028b      	lsls	r3, r1, #10
 8001552:	4621      	mov	r1, r4
 8001554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001558:	4621      	mov	r1, r4
 800155a:	028a      	lsls	r2, r1, #10
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001564:	2200      	movs	r2, #0
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	61fa      	str	r2, [r7, #28]
 800156a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800156e:	f7fe fe4f 	bl	8000210 <__aeabi_uldivmod>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4613      	mov	r3, r2
 8001578:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800157c:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <HAL_RCC_GetSysClockFreq+0x348>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	0f1b      	lsrs	r3, r3, #28
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800158a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800158e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800159a:	e003      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800159e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80015a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3798      	adds	r7, #152	@ 0x98
 80015ac:	46bd      	mov	sp, r7
 80015ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	00f42400 	.word	0x00f42400
 80015bc:	017d7840 	.word	0x017d7840

080015c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e28d      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8083 	beq.w	80016e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015e0:	4b94      	ldr	r3, [pc, #592]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d019      	beq.n	8001620 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80015ec:	4b91      	ldr	r3, [pc, #580]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 030c 	and.w	r3, r3, #12
        || \
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d106      	bne.n	8001606 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80015f8:	4b8e      	ldr	r3, [pc, #568]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001600:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001604:	d00c      	beq.n	8001620 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001606:	4b8b      	ldr	r3, [pc, #556]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800160e:	2b0c      	cmp	r3, #12
 8001610:	d112      	bne.n	8001638 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001612:	4b88      	ldr	r3, [pc, #544]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800161a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800161e:	d10b      	bne.n	8001638 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	4b84      	ldr	r3, [pc, #528]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d05b      	beq.n	80016e4 <HAL_RCC_OscConfig+0x124>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d157      	bne.n	80016e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e25a      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001640:	d106      	bne.n	8001650 <HAL_RCC_OscConfig+0x90>
 8001642:	4b7c      	ldr	r3, [pc, #496]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a7b      	ldr	r2, [pc, #492]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e01d      	b.n	800168c <HAL_RCC_OscConfig+0xcc>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0xb4>
 800165a:	4b76      	ldr	r3, [pc, #472]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a75      	ldr	r2, [pc, #468]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001660:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b73      	ldr	r3, [pc, #460]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a72      	ldr	r2, [pc, #456]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e00b      	b.n	800168c <HAL_RCC_OscConfig+0xcc>
 8001674:	4b6f      	ldr	r3, [pc, #444]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a6e      	ldr	r2, [pc, #440]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 800167a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b6c      	ldr	r3, [pc, #432]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a6b      	ldr	r2, [pc, #428]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800168a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d013      	beq.n	80016bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff f9fe 	bl	8000a94 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff f9fa 	bl	8000a94 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	@ 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e21f      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	4b61      	ldr	r3, [pc, #388]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0xdc>
 80016ba:	e014      	b.n	80016e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff f9ea 	bl	8000a94 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff f9e6 	bl	8000a94 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	@ 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e20b      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d6:	4b57      	ldr	r3, [pc, #348]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x104>
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d06f      	beq.n	80017d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80016f2:	4b50      	ldr	r3, [pc, #320]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d017      	beq.n	800172e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80016fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
        || \
 8001706:	2b08      	cmp	r3, #8
 8001708:	d105      	bne.n	8001716 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800170a:	4b4a      	ldr	r3, [pc, #296]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00b      	beq.n	800172e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001716:	4b47      	ldr	r3, [pc, #284]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800171e:	2b0c      	cmp	r3, #12
 8001720:	d11c      	bne.n	800175c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001722:	4b44      	ldr	r3, [pc, #272]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d116      	bne.n	800175c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172e:	4b41      	ldr	r3, [pc, #260]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <HAL_RCC_OscConfig+0x186>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e1d3      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001746:	4b3b      	ldr	r3, [pc, #236]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4937      	ldr	r1, [pc, #220]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	e03a      	b.n	80017d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d020      	beq.n	80017a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001764:	4b34      	ldr	r3, [pc, #208]	@ (8001838 <HAL_RCC_OscConfig+0x278>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff f993 	bl	8000a94 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001772:	f7ff f98f 	bl	8000a94 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e1b4      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001784:	4b2b      	ldr	r3, [pc, #172]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001790:	4b28      	ldr	r3, [pc, #160]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4925      	ldr	r1, [pc, #148]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
 80017a4:	e015      	b.n	80017d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a6:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <HAL_RCC_OscConfig+0x278>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff f972 	bl	8000a94 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b4:	f7ff f96e 	bl	8000a94 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e193      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d036      	beq.n	800184c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d016      	beq.n	8001814 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e6:	4b15      	ldr	r3, [pc, #84]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff f952 	bl	8000a94 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f4:	f7ff f94e 	bl	8000a94 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e173      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001806:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <HAL_RCC_OscConfig+0x274>)
 8001808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x234>
 8001812:	e01b      	b.n	800184c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001814:	4b09      	ldr	r3, [pc, #36]	@ (800183c <HAL_RCC_OscConfig+0x27c>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181a:	f7ff f93b 	bl	8000a94 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001820:	e00e      	b.n	8001840 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001822:	f7ff f937 	bl	8000a94 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d907      	bls.n	8001840 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e15c      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
 8001834:	40023800 	.word	0x40023800
 8001838:	42470000 	.word	0x42470000
 800183c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	4b8a      	ldr	r3, [pc, #552]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1ea      	bne.n	8001822 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 8097 	beq.w	8001988 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185e:	4b83      	ldr	r3, [pc, #524]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10f      	bne.n	800188a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	4a7e      	ldr	r2, [pc, #504]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001878:	6413      	str	r3, [r2, #64]	@ 0x40
 800187a:	4b7c      	ldr	r3, [pc, #496]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001886:	2301      	movs	r3, #1
 8001888:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188a:	4b79      	ldr	r3, [pc, #484]	@ (8001a70 <HAL_RCC_OscConfig+0x4b0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d118      	bne.n	80018c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001896:	4b76      	ldr	r3, [pc, #472]	@ (8001a70 <HAL_RCC_OscConfig+0x4b0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a75      	ldr	r2, [pc, #468]	@ (8001a70 <HAL_RCC_OscConfig+0x4b0>)
 800189c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a2:	f7ff f8f7 	bl	8000a94 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018aa:	f7ff f8f3 	bl	8000a94 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e118      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	4b6c      	ldr	r3, [pc, #432]	@ (8001a70 <HAL_RCC_OscConfig+0x4b0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x31e>
 80018d0:	4b66      	ldr	r3, [pc, #408]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d4:	4a65      	ldr	r2, [pc, #404]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6713      	str	r3, [r2, #112]	@ 0x70
 80018dc:	e01c      	b.n	8001918 <HAL_RCC_OscConfig+0x358>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x340>
 80018e6:	4b61      	ldr	r3, [pc, #388]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ea:	4a60      	ldr	r2, [pc, #384]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f2:	4b5e      	ldr	r3, [pc, #376]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 80018f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f6:	4a5d      	ldr	r2, [pc, #372]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80018fe:	e00b      	b.n	8001918 <HAL_RCC_OscConfig+0x358>
 8001900:	4b5a      	ldr	r3, [pc, #360]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001904:	4a59      	ldr	r2, [pc, #356]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	6713      	str	r3, [r2, #112]	@ 0x70
 800190c:	4b57      	ldr	r3, [pc, #348]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001910:	4a56      	ldr	r2, [pc, #344]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001912:	f023 0304 	bic.w	r3, r3, #4
 8001916:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d015      	beq.n	800194c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001920:	f7ff f8b8 	bl	8000a94 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001926:	e00a      	b.n	800193e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001928:	f7ff f8b4 	bl	8000a94 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e0d7      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193e:	4b4b      	ldr	r3, [pc, #300]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0ee      	beq.n	8001928 <HAL_RCC_OscConfig+0x368>
 800194a:	e014      	b.n	8001976 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff f8a2 	bl	8000a94 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001952:	e00a      	b.n	800196a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f7ff f89e 	bl	8000a94 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e0c1      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196a:	4b40      	ldr	r3, [pc, #256]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ee      	bne.n	8001954 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	4a3a      	ldr	r2, [pc, #232]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001982:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001986:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80ad 	beq.w	8001aec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001992:	4b36      	ldr	r3, [pc, #216]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b08      	cmp	r3, #8
 800199c:	d060      	beq.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d145      	bne.n	8001a32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a6:	4b33      	ldr	r3, [pc, #204]	@ (8001a74 <HAL_RCC_OscConfig+0x4b4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff f872 	bl	8000a94 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff f86e 	bl	8000a94 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e093      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c6:	4b29      	ldr	r3, [pc, #164]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e0:	019b      	lsls	r3, r3, #6
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	3b01      	subs	r3, #1
 80019ec:	041b      	lsls	r3, r3, #16
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f4:	061b      	lsls	r3, r3, #24
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fc:	071b      	lsls	r3, r3, #28
 80019fe:	491b      	ldr	r1, [pc, #108]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a04:	4b1b      	ldr	r3, [pc, #108]	@ (8001a74 <HAL_RCC_OscConfig+0x4b4>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f843 	bl	8000a94 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff f83f 	bl	8000a94 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e064      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x452>
 8001a30:	e05c      	b.n	8001aec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <HAL_RCC_OscConfig+0x4b4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff f82c 	bl	8000a94 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a40:	f7ff f828 	bl	8000a94 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e04d      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_RCC_OscConfig+0x4ac>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x480>
 8001a5e:	e045      	b.n	8001aec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d107      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e040      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40007000 	.word	0x40007000
 8001a74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a78:	4b1f      	ldr	r3, [pc, #124]	@ (8001af8 <HAL_RCC_OscConfig+0x538>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d030      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d129      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d122      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001aae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d119      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001abe:	085b      	lsrs	r3, r3, #1
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d10f      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d107      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800

08001afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e041      	b.n	8001b92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d106      	bne.n	8001b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f839 	bl	8001b9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3304      	adds	r3, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	f000 f9c0 	bl	8001ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d001      	beq.n	8001bc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e04e      	b.n	8001c66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a23      	ldr	r2, [pc, #140]	@ (8001c74 <HAL_TIM_Base_Start_IT+0xc4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d022      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x80>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bf2:	d01d      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x80>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c78 <HAL_TIM_Base_Start_IT+0xc8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d018      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x80>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1e      	ldr	r2, [pc, #120]	@ (8001c7c <HAL_TIM_Base_Start_IT+0xcc>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d013      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x80>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001c80 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00e      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x80>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1b      	ldr	r2, [pc, #108]	@ (8001c84 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d009      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x80>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a19      	ldr	r2, [pc, #100]	@ (8001c88 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d004      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0x80>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a18      	ldr	r2, [pc, #96]	@ (8001c8c <HAL_TIM_Base_Start_IT+0xdc>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d111      	bne.n	8001c54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d010      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0201 	orr.w	r2, r2, #1
 8001c50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c52:	e007      	b.n	8001c64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40010000 	.word	0x40010000
 8001c78:	40000400 	.word	0x40000400
 8001c7c:	40000800 	.word	0x40000800
 8001c80:	40000c00 	.word	0x40000c00
 8001c84:	40010400 	.word	0x40010400
 8001c88:	40014000 	.word	0x40014000
 8001c8c:	40001800 	.word	0x40001800

08001c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d020      	beq.n	8001cf4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d01b      	beq.n	8001cf4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0202 	mvn.w	r2, #2
 8001cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8d2 	bl	8001e84 <HAL_TIM_IC_CaptureCallback>
 8001ce0:	e005      	b.n	8001cee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8c4 	bl	8001e70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f8d5 	bl	8001e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d020      	beq.n	8001d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01b      	beq.n	8001d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 0204 	mvn.w	r2, #4
 8001d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2202      	movs	r2, #2
 8001d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f8ac 	bl	8001e84 <HAL_TIM_IC_CaptureCallback>
 8001d2c:	e005      	b.n	8001d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f89e 	bl	8001e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f8af 	bl	8001e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d020      	beq.n	8001d8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01b      	beq.n	8001d8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0208 	mvn.w	r2, #8
 8001d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2204      	movs	r2, #4
 8001d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f886 	bl	8001e84 <HAL_TIM_IC_CaptureCallback>
 8001d78:	e005      	b.n	8001d86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f878 	bl	8001e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f889 	bl	8001e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d020      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f003 0310 	and.w	r3, r3, #16
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d01b      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0210 	mvn.w	r2, #16
 8001da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2208      	movs	r2, #8
 8001dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f860 	bl	8001e84 <HAL_TIM_IC_CaptureCallback>
 8001dc4:	e005      	b.n	8001dd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f852 	bl	8001e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f863 	bl	8001e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00c      	beq.n	8001dfc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0201 	mvn.w	r2, #1
 8001df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7fe fcf6 	bl	80007e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00c      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d007      	beq.n	8001e20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f900 	bl	8002020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00c      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f834 	bl	8001eac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00c      	beq.n	8001e68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0220 	mvn.w	r2, #32
 8001e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f8d2 	bl	800200c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a43      	ldr	r2, [pc, #268]	@ (8001fe0 <TIM_Base_SetConfig+0x120>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d013      	beq.n	8001f00 <TIM_Base_SetConfig+0x40>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ede:	d00f      	beq.n	8001f00 <TIM_Base_SetConfig+0x40>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a40      	ldr	r2, [pc, #256]	@ (8001fe4 <TIM_Base_SetConfig+0x124>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d00b      	beq.n	8001f00 <TIM_Base_SetConfig+0x40>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3f      	ldr	r2, [pc, #252]	@ (8001fe8 <TIM_Base_SetConfig+0x128>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d007      	beq.n	8001f00 <TIM_Base_SetConfig+0x40>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3e      	ldr	r2, [pc, #248]	@ (8001fec <TIM_Base_SetConfig+0x12c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d003      	beq.n	8001f00 <TIM_Base_SetConfig+0x40>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3d      	ldr	r2, [pc, #244]	@ (8001ff0 <TIM_Base_SetConfig+0x130>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d108      	bne.n	8001f12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a32      	ldr	r2, [pc, #200]	@ (8001fe0 <TIM_Base_SetConfig+0x120>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d02b      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f20:	d027      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a2f      	ldr	r2, [pc, #188]	@ (8001fe4 <TIM_Base_SetConfig+0x124>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d023      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a2e      	ldr	r2, [pc, #184]	@ (8001fe8 <TIM_Base_SetConfig+0x128>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d01f      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a2d      	ldr	r2, [pc, #180]	@ (8001fec <TIM_Base_SetConfig+0x12c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d01b      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff0 <TIM_Base_SetConfig+0x130>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d017      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a2b      	ldr	r2, [pc, #172]	@ (8001ff4 <TIM_Base_SetConfig+0x134>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ff8 <TIM_Base_SetConfig+0x138>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00f      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a29      	ldr	r2, [pc, #164]	@ (8001ffc <TIM_Base_SetConfig+0x13c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00b      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a28      	ldr	r2, [pc, #160]	@ (8002000 <TIM_Base_SetConfig+0x140>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a27      	ldr	r2, [pc, #156]	@ (8002004 <TIM_Base_SetConfig+0x144>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d003      	beq.n	8001f72 <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a26      	ldr	r2, [pc, #152]	@ (8002008 <TIM_Base_SetConfig+0x148>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d108      	bne.n	8001f84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe0 <TIM_Base_SetConfig+0x120>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d003      	beq.n	8001fb2 <TIM_Base_SetConfig+0xf2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a10      	ldr	r2, [pc, #64]	@ (8001ff0 <TIM_Base_SetConfig+0x130>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d103      	bne.n	8001fba <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	691a      	ldr	r2, [r3, #16]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f043 0204 	orr.w	r2, r3, #4
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	601a      	str	r2, [r3, #0]
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	40000800 	.word	0x40000800
 8001fec:	40000c00 	.word	0x40000c00
 8001ff0:	40010400 	.word	0x40010400
 8001ff4:	40014000 	.word	0x40014000
 8001ff8:	40014400 	.word	0x40014400
 8001ffc:	40014800 	.word	0x40014800
 8002000:	40001800 	.word	0x40001800
 8002004:	40001c00 	.word	0x40001c00
 8002008:	40002000 	.word	0x40002000

0800200c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002046:	2b84      	cmp	r3, #132	@ 0x84
 8002048:	d005      	beq.n	8002056 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800204a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4413      	add	r3, r2
 8002052:	3303      	adds	r3, #3
 8002054:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002056:	68fb      	ldr	r3, [r7, #12]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800206a:	f3ef 8305 	mrs	r3, IPSR
 800206e:	607b      	str	r3, [r7, #4]
  return(result);
 8002070:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002072:	2b00      	cmp	r3, #0
 8002074:	bf14      	ite	ne
 8002076:	2301      	movne	r3, #1
 8002078:	2300      	moveq	r3, #0
 800207a:	b2db      	uxtb	r3, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800208c:	f001 f92a 	bl	80032e4 <vTaskStartScheduler>
  
  return osOK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	bd80      	pop	{r7, pc}

08002096 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002096:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002098:	b089      	sub	sp, #36	@ 0x24
 800209a:	af04      	add	r7, sp, #16
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d020      	beq.n	80020ea <osThreadCreate+0x54>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01c      	beq.n	80020ea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685c      	ldr	r4, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691e      	ldr	r6, [r3, #16]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ffb6 	bl	8002034 <makeFreeRtosPriority>
 80020c8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020d2:	9202      	str	r2, [sp, #8]
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	9100      	str	r1, [sp, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4632      	mov	r2, r6
 80020dc:	4629      	mov	r1, r5
 80020de:	4620      	mov	r0, r4
 80020e0:	f000 ff32 	bl	8002f48 <xTaskCreateStatic>
 80020e4:	4603      	mov	r3, r0
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	e01c      	b.n	8002124 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685c      	ldr	r4, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020f6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff98 	bl	8002034 <makeFreeRtosPriority>
 8002104:	4602      	mov	r2, r0
 8002106:	f107 030c 	add.w	r3, r7, #12
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	9200      	str	r2, [sp, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	4632      	mov	r2, r6
 8002112:	4629      	mov	r1, r5
 8002114:	4620      	mov	r0, r4
 8002116:	f000 ff77 	bl	8003008 <xTaskCreate>
 800211a:	4603      	mov	r3, r0
 800211c:	2b01      	cmp	r3, #1
 800211e:	d001      	beq.n	8002124 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002120:	2300      	movs	r3, #0
 8002122:	e000      	b.n	8002126 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002124:	68fb      	ldr	r3, [r7, #12]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800212e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <osDelay+0x16>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	e000      	b.n	8002146 <osDelay+0x18>
 8002144:	2301      	movs	r3, #1
 8002146:	4618      	mov	r0, r3
 8002148:	f001 f896 	bl	8003278 <vTaskDelay>
  
  return osOK;
 800214c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af02      	add	r7, sp, #8
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00f      	beq.n	8002188 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d10a      	bne.n	8002184 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2203      	movs	r2, #3
 8002174:	9200      	str	r2, [sp, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	2001      	movs	r0, #1
 800217c:	f000 f9c0 	bl	8002500 <xQueueGenericCreateStatic>
 8002180:	4603      	mov	r3, r0
 8002182:	e016      	b.n	80021b2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002184:	2300      	movs	r3, #0
 8002186:	e014      	b.n	80021b2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d110      	bne.n	80021b0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800218e:	2203      	movs	r2, #3
 8002190:	2100      	movs	r1, #0
 8002192:	2001      	movs	r0, #1
 8002194:	f000 fa31 	bl	80025fa <xQueueGenericCreate>
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <osSemaphoreCreate+0x56>
 80021a0:	2300      	movs	r3, #0
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fa82 	bl	80026b0 <xQueueGenericSend>
      return sema;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	e000      	b.n	80021b2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80021b0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80021d0:	2380      	movs	r3, #128	@ 0x80
 80021d2:	e03a      	b.n	800224a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021de:	d103      	bne.n	80021e8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80021e0:	f04f 33ff 	mov.w	r3, #4294967295
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	e009      	b.n	80021fc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d006      	beq.n	80021fc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <osSemaphoreWait+0x40>
      ticks = 1;
 80021f8:	2301      	movs	r3, #1
 80021fa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80021fc:	f7ff ff32 	bl	8002064 <inHandlerMode>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d017      	beq.n	8002236 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002206:	f107 0308 	add.w	r3, r7, #8
 800220a:	461a      	mov	r2, r3
 800220c:	2100      	movs	r1, #0
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fcf0 	bl	8002bf4 <xQueueReceiveFromISR>
 8002214:	4603      	mov	r3, r0
 8002216:	2b01      	cmp	r3, #1
 8002218:	d001      	beq.n	800221e <osSemaphoreWait+0x62>
      return osErrorOS;
 800221a:	23ff      	movs	r3, #255	@ 0xff
 800221c:	e015      	b.n	800224a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d011      	beq.n	8002248 <osSemaphoreWait+0x8c>
 8002224:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <osSemaphoreWait+0x98>)
 8002226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	f3bf 8f4f 	dsb	sy
 8002230:	f3bf 8f6f 	isb	sy
 8002234:	e008      	b.n	8002248 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002236:	68f9      	ldr	r1, [r7, #12]
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 fbcb 	bl	80029d4 <xQueueSemaphoreTake>
 800223e:	4603      	mov	r3, r0
 8002240:	2b01      	cmp	r3, #1
 8002242:	d001      	beq.n	8002248 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002244:	23ff      	movs	r3, #255	@ 0xff
 8002246:	e000      	b.n	800224a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	e000ed04 	.word	0xe000ed04

08002258 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002264:	2300      	movs	r3, #0
 8002266:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8002268:	f7ff fefc 	bl	8002064 <inHandlerMode>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d016      	beq.n	80022a0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002272:	f107 0308 	add.w	r3, r7, #8
 8002276:	4619      	mov	r1, r3
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fb1b 	bl	80028b4 <xQueueGiveFromISR>
 800227e:	4603      	mov	r3, r0
 8002280:	2b01      	cmp	r3, #1
 8002282:	d001      	beq.n	8002288 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002284:	23ff      	movs	r3, #255	@ 0xff
 8002286:	e017      	b.n	80022b8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d013      	beq.n	80022b6 <osSemaphoreRelease+0x5e>
 800228e:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <osSemaphoreRelease+0x68>)
 8002290:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	f3bf 8f6f 	isb	sy
 800229e:	e00a      	b.n	80022b6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80022a0:	2300      	movs	r3, #0
 80022a2:	2200      	movs	r2, #0
 80022a4:	2100      	movs	r1, #0
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fa02 	bl	80026b0 <xQueueGenericSend>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d001      	beq.n	80022b6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80022b2:	23ff      	movs	r3, #255	@ 0xff
 80022b4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80022b6:	68fb      	ldr	r3, [r7, #12]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	e000ed04 	.word	0xe000ed04

080022c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f103 0208 	add.w	r2, r3, #8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f04f 32ff 	mov.w	r2, #4294967295
 80022dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f103 0208 	add.w	r2, r3, #8
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f103 0208 	add.w	r2, r3, #8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	601a      	str	r2, [r3, #0]
}
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002366:	b480      	push	{r7}
 8002368:	b085      	sub	sp, #20
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d103      	bne.n	8002386 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	e00c      	b.n	80023a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3308      	adds	r3, #8
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	e002      	b.n	8002394 <vListInsert+0x2e>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	429a      	cmp	r2, r3
 800239e:	d2f6      	bcs.n	800238e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	601a      	str	r2, [r3, #0]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6892      	ldr	r2, [r2, #8]
 80023ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6852      	ldr	r2, [r2, #4]
 80023f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	429a      	cmp	r2, r3
 8002402:	d103      	bne.n	800240c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1e5a      	subs	r2, r3, #1
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10b      	bne.n	8002458 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002444:	f383 8811 	msr	BASEPRI, r3
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002452:	bf00      	nop
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002458:	f001 fea6 	bl	80041a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002464:	68f9      	ldr	r1, [r7, #12]
 8002466:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	441a      	add	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002488:	3b01      	subs	r3, #1
 800248a:	68f9      	ldr	r1, [r7, #12]
 800248c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	441a      	add	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	22ff      	movs	r2, #255	@ 0xff
 800249c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	22ff      	movs	r2, #255	@ 0xff
 80024a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d114      	bne.n	80024d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d01a      	beq.n	80024ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3310      	adds	r3, #16
 80024ba:	4618      	mov	r0, r3
 80024bc:	f001 f95c 	bl	8003778 <xTaskRemoveFromEventList>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d012      	beq.n	80024ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80024c6:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <xQueueGenericReset+0xd0>)
 80024c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	f3bf 8f4f 	dsb	sy
 80024d2:	f3bf 8f6f 	isb	sy
 80024d6:	e009      	b.n	80024ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3310      	adds	r3, #16
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fef1 	bl	80022c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	3324      	adds	r3, #36	@ 0x24
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff feec 	bl	80022c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80024ec:	f001 fe8e 	bl	800420c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80024f0:	2301      	movs	r3, #1
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	e000ed04 	.word	0xe000ed04

08002500 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08e      	sub	sp, #56	@ 0x38
 8002504:	af02      	add	r7, sp, #8
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10b      	bne.n	800252c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002526:	bf00      	nop
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10b      	bne.n	800254a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002536:	f383 8811 	msr	BASEPRI, r3
 800253a:	f3bf 8f6f 	isb	sy
 800253e:	f3bf 8f4f 	dsb	sy
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	e7fd      	b.n	8002546 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <xQueueGenericCreateStatic+0x56>
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <xQueueGenericCreateStatic+0x5a>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <xQueueGenericCreateStatic+0x5c>
 800255a:	2300      	movs	r3, #0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10b      	bne.n	8002578 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	623b      	str	r3, [r7, #32]
}
 8002572:	bf00      	nop
 8002574:	bf00      	nop
 8002576:	e7fd      	b.n	8002574 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d102      	bne.n	8002584 <xQueueGenericCreateStatic+0x84>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <xQueueGenericCreateStatic+0x88>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <xQueueGenericCreateStatic+0x8a>
 8002588:	2300      	movs	r3, #0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10b      	bne.n	80025a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800258e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002592:	f383 8811 	msr	BASEPRI, r3
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	61fb      	str	r3, [r7, #28]
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	e7fd      	b.n	80025a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80025a6:	2348      	movs	r3, #72	@ 0x48
 80025a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2b48      	cmp	r3, #72	@ 0x48
 80025ae:	d00b      	beq.n	80025c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80025b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	61bb      	str	r3, [r7, #24]
}
 80025c2:	bf00      	nop
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80025c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80025ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00d      	beq.n	80025f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80025d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80025e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 f840 	bl	8002670 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80025f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3730      	adds	r7, #48	@ 0x30
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b08a      	sub	sp, #40	@ 0x28
 80025fe:	af02      	add	r7, sp, #8
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	4613      	mov	r3, r2
 8002606:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10b      	bne.n	8002626 <xQueueGenericCreate+0x2c>
	__asm volatile
 800260e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002612:	f383 8811 	msr	BASEPRI, r3
 8002616:	f3bf 8f6f 	isb	sy
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	613b      	str	r3, [r7, #16]
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	e7fd      	b.n	8002622 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	fb02 f303 	mul.w	r3, r2, r3
 800262e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	3348      	adds	r3, #72	@ 0x48
 8002634:	4618      	mov	r0, r3
 8002636:	f001 fed9 	bl	80043ec <pvPortMalloc>
 800263a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d011      	beq.n	8002666 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3348      	adds	r3, #72	@ 0x48
 800264a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002654:	79fa      	ldrb	r2, [r7, #7]
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	4613      	mov	r3, r2
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	68b9      	ldr	r1, [r7, #8]
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 f805 	bl	8002670 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002666:	69bb      	ldr	r3, [r7, #24]
	}
 8002668:	4618      	mov	r0, r3
 800266a:	3720      	adds	r7, #32
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d103      	bne.n	800268c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	e002      	b.n	8002692 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800269e:	2101      	movs	r1, #1
 80026a0:	69b8      	ldr	r0, [r7, #24]
 80026a2:	f7ff fec3 	bl	800242c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80026a6:	bf00      	nop
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08e      	sub	sp, #56	@ 0x38
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80026be:	2300      	movs	r3, #0
 80026c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80026c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10b      	bne.n	80026e4 <xQueueGenericSend+0x34>
	__asm volatile
 80026cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026d0:	f383 8811 	msr	BASEPRI, r3
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	e7fd      	b.n	80026e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d103      	bne.n	80026f2 <xQueueGenericSend+0x42>
 80026ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <xQueueGenericSend+0x46>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <xQueueGenericSend+0x48>
 80026f6:	2300      	movs	r3, #0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10b      	bne.n	8002714 <xQueueGenericSend+0x64>
	__asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800270e:	bf00      	nop
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d103      	bne.n	8002722 <xQueueGenericSend+0x72>
 800271a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <xQueueGenericSend+0x76>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <xQueueGenericSend+0x78>
 8002726:	2300      	movs	r3, #0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10b      	bne.n	8002744 <xQueueGenericSend+0x94>
	__asm volatile
 800272c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	623b      	str	r3, [r7, #32]
}
 800273e:	bf00      	nop
 8002740:	bf00      	nop
 8002742:	e7fd      	b.n	8002740 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002744:	f001 f9d8 	bl	8003af8 <xTaskGetSchedulerState>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d102      	bne.n	8002754 <xQueueGenericSend+0xa4>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <xQueueGenericSend+0xa8>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <xQueueGenericSend+0xaa>
 8002758:	2300      	movs	r3, #0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10b      	bne.n	8002776 <xQueueGenericSend+0xc6>
	__asm volatile
 800275e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	61fb      	str	r3, [r7, #28]
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	e7fd      	b.n	8002772 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002776:	f001 fd17 	bl	80041a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800277a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800277e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002782:	429a      	cmp	r2, r3
 8002784:	d302      	bcc.n	800278c <xQueueGenericSend+0xdc>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d129      	bne.n	80027e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002792:	f000 fac9 	bl	8002d28 <prvCopyDataToQueue>
 8002796:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800279a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279c:	2b00      	cmp	r3, #0
 800279e:	d010      	beq.n	80027c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a2:	3324      	adds	r3, #36	@ 0x24
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 ffe7 	bl	8003778 <xTaskRemoveFromEventList>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d013      	beq.n	80027d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80027b0:	4b3f      	ldr	r3, [pc, #252]	@ (80028b0 <xQueueGenericSend+0x200>)
 80027b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	f3bf 8f6f 	isb	sy
 80027c0:	e00a      	b.n	80027d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80027c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d007      	beq.n	80027d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80027c8:	4b39      	ldr	r3, [pc, #228]	@ (80028b0 <xQueueGenericSend+0x200>)
 80027ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80027d8:	f001 fd18 	bl	800420c <vPortExitCritical>
				return pdPASS;
 80027dc:	2301      	movs	r3, #1
 80027de:	e063      	b.n	80028a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d103      	bne.n	80027ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027e6:	f001 fd11 	bl	800420c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	e05c      	b.n	80028a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d106      	bne.n	8002802 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	4618      	mov	r0, r3
 80027fa:	f001 f821 	bl	8003840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027fe:	2301      	movs	r3, #1
 8002800:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002802:	f001 fd03 	bl	800420c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002806:	f000 fdcf 	bl	80033a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800280a:	f001 fccd 	bl	80041a8 <vPortEnterCritical>
 800280e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002810:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002814:	b25b      	sxtb	r3, r3
 8002816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281a:	d103      	bne.n	8002824 <xQueueGenericSend+0x174>
 800281c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002826:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800282a:	b25b      	sxtb	r3, r3
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d103      	bne.n	800283a <xQueueGenericSend+0x18a>
 8002832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800283a:	f001 fce7 	bl	800420c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800283e:	1d3a      	adds	r2, r7, #4
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	4611      	mov	r1, r2
 8002846:	4618      	mov	r0, r3
 8002848:	f001 f810 	bl	800386c <xTaskCheckForTimeOut>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d124      	bne.n	800289c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002852:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002854:	f000 fb60 	bl	8002f18 <prvIsQueueFull>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d018      	beq.n	8002890 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800285e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002860:	3310      	adds	r3, #16
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f000 ff60 	bl	800372c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800286c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800286e:	f000 faeb 	bl	8002e48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002872:	f000 fda7 	bl	80033c4 <xTaskResumeAll>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	f47f af7c 	bne.w	8002776 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800287e:	4b0c      	ldr	r3, [pc, #48]	@ (80028b0 <xQueueGenericSend+0x200>)
 8002880:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	f3bf 8f4f 	dsb	sy
 800288a:	f3bf 8f6f 	isb	sy
 800288e:	e772      	b.n	8002776 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002890:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002892:	f000 fad9 	bl	8002e48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002896:	f000 fd95 	bl	80033c4 <xTaskResumeAll>
 800289a:	e76c      	b.n	8002776 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800289c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800289e:	f000 fad3 	bl	8002e48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028a2:	f000 fd8f 	bl	80033c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80028a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3738      	adds	r7, #56	@ 0x38
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	e000ed04 	.word	0xe000ed04

080028b4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08e      	sub	sp, #56	@ 0x38
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80028c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10b      	bne.n	80028e0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80028c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	f3bf 8f6f 	isb	sy
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	623b      	str	r3, [r7, #32]
}
 80028da:	bf00      	nop
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80028e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00b      	beq.n	8002900 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80028e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	61fb      	str	r3, [r7, #28]
}
 80028fa:	bf00      	nop
 80028fc:	bf00      	nop
 80028fe:	e7fd      	b.n	80028fc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d103      	bne.n	8002910 <xQueueGiveFromISR+0x5c>
 8002908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <xQueueGiveFromISR+0x60>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <xQueueGiveFromISR+0x62>
 8002914:	2300      	movs	r3, #0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10b      	bne.n	8002932 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800291a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800291e:	f383 8811 	msr	BASEPRI, r3
 8002922:	f3bf 8f6f 	isb	sy
 8002926:	f3bf 8f4f 	dsb	sy
 800292a:	61bb      	str	r3, [r7, #24]
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	e7fd      	b.n	800292e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002932:	f001 fd19 	bl	8004368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002936:	f3ef 8211 	mrs	r2, BASEPRI
 800293a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800293e:	f383 8811 	msr	BASEPRI, r3
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	617a      	str	r2, [r7, #20]
 800294c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800294e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002950:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002956:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800295a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800295e:	429a      	cmp	r2, r3
 8002960:	d22b      	bcs.n	80029ba <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002964:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800296c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002972:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002974:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d112      	bne.n	80029a4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800297e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002988:	3324      	adds	r3, #36	@ 0x24
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fef4 	bl	8003778 <xTaskRemoveFromEventList>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00e      	beq.n	80029b4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00b      	beq.n	80029b4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	e007      	b.n	80029b4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80029a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029a8:	3301      	adds	r3, #1
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	b25a      	sxtb	r2, r3
 80029ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80029b4:	2301      	movs	r3, #1
 80029b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80029b8:	e001      	b.n	80029be <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80029be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80029c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80029ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3738      	adds	r7, #56	@ 0x38
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08e      	sub	sp, #56	@ 0x38
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80029de:	2300      	movs	r3, #0
 80029e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80029ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10b      	bne.n	8002a08 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	623b      	str	r3, [r7, #32]
}
 8002a02:	bf00      	nop
 8002a04:	bf00      	nop
 8002a06:	e7fd      	b.n	8002a04 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00b      	beq.n	8002a28 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	61fb      	str	r3, [r7, #28]
}
 8002a22:	bf00      	nop
 8002a24:	bf00      	nop
 8002a26:	e7fd      	b.n	8002a24 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a28:	f001 f866 	bl	8003af8 <xTaskGetSchedulerState>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d102      	bne.n	8002a38 <xQueueSemaphoreTake+0x64>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <xQueueSemaphoreTake+0x68>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <xQueueSemaphoreTake+0x6a>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10b      	bne.n	8002a5a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a46:	f383 8811 	msr	BASEPRI, r3
 8002a4a:	f3bf 8f6f 	isb	sy
 8002a4e:	f3bf 8f4f 	dsb	sy
 8002a52:	61bb      	str	r3, [r7, #24]
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	e7fd      	b.n	8002a56 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a5a:	f001 fba5 	bl	80041a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a62:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d024      	beq.n	8002ab4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6c:	1e5a      	subs	r2, r3, #1
 8002a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a70:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d104      	bne.n	8002a84 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002a7a:	f001 f9e9 	bl	8003e50 <pvTaskIncrementMutexHeldCount>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a82:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00f      	beq.n	8002aac <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a8e:	3310      	adds	r3, #16
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fe71 	bl	8003778 <xTaskRemoveFromEventList>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002a9c:	4b54      	ldr	r3, [pc, #336]	@ (8002bf0 <xQueueSemaphoreTake+0x21c>)
 8002a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002aac:	f001 fbae 	bl	800420c <vPortExitCritical>
				return pdPASS;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e098      	b.n	8002be6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d112      	bne.n	8002ae0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00b      	beq.n	8002ad8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	617b      	str	r3, [r7, #20]
}
 8002ad2:	bf00      	nop
 8002ad4:	bf00      	nop
 8002ad6:	e7fd      	b.n	8002ad4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002ad8:	f001 fb98 	bl	800420c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002adc:	2300      	movs	r3, #0
 8002ade:	e082      	b.n	8002be6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ae6:	f107 030c 	add.w	r3, r7, #12
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fea8 	bl	8003840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002af0:	2301      	movs	r3, #1
 8002af2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002af4:	f001 fb8a 	bl	800420c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002af8:	f000 fc56 	bl	80033a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002afc:	f001 fb54 	bl	80041a8 <vPortEnterCritical>
 8002b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b06:	b25b      	sxtb	r3, r3
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d103      	bne.n	8002b16 <xQueueSemaphoreTake+0x142>
 8002b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b1c:	b25b      	sxtb	r3, r3
 8002b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b22:	d103      	bne.n	8002b2c <xQueueSemaphoreTake+0x158>
 8002b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b2c:	f001 fb6e 	bl	800420c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b30:	463a      	mov	r2, r7
 8002b32:	f107 030c 	add.w	r3, r7, #12
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fe97 	bl	800386c <xTaskCheckForTimeOut>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d132      	bne.n	8002baa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b46:	f000 f9d1 	bl	8002eec <prvIsQueueEmpty>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d026      	beq.n	8002b9e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d109      	bne.n	8002b6c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002b58:	f001 fb26 	bl	80041a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 ffe7 	bl	8003b34 <xTaskPriorityInherit>
 8002b66:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002b68:	f001 fb50 	bl	800420c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6e:	3324      	adds	r3, #36	@ 0x24
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 fdd9 	bl	800372c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b7c:	f000 f964 	bl	8002e48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b80:	f000 fc20 	bl	80033c4 <xTaskResumeAll>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f47f af67 	bne.w	8002a5a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002b8c:	4b18      	ldr	r3, [pc, #96]	@ (8002bf0 <xQueueSemaphoreTake+0x21c>)
 8002b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	e75d      	b.n	8002a5a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002b9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ba0:	f000 f952 	bl	8002e48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ba4:	f000 fc0e 	bl	80033c4 <xTaskResumeAll>
 8002ba8:	e757      	b.n	8002a5a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002baa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002bac:	f000 f94c 	bl	8002e48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bb0:	f000 fc08 	bl	80033c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002bb6:	f000 f999 	bl	8002eec <prvIsQueueEmpty>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f43f af4c 	beq.w	8002a5a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00d      	beq.n	8002be4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002bc8:	f001 faee 	bl	80041a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002bcc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002bce:	f000 f893 	bl	8002cf8 <prvGetDisinheritPriorityAfterTimeout>
 8002bd2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f001 f8a8 	bl	8003d30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002be0:	f001 fb14 	bl	800420c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002be4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3738      	adds	r7, #56	@ 0x38
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	e000ed04 	.word	0xe000ed04

08002bf4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08e      	sub	sp, #56	@ 0x38
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10b      	bne.n	8002c22 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8002c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c0e:	f383 8811 	msr	BASEPRI, r3
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	623b      	str	r3, [r7, #32]
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	e7fd      	b.n	8002c1e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d103      	bne.n	8002c30 <xQueueReceiveFromISR+0x3c>
 8002c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <xQueueReceiveFromISR+0x40>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <xQueueReceiveFromISR+0x42>
 8002c34:	2300      	movs	r3, #0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10b      	bne.n	8002c52 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8002c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	61fb      	str	r3, [r7, #28]
}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	e7fd      	b.n	8002c4e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c52:	f001 fb89 	bl	8004368 <vPortValidateInterruptPriority>
	__asm volatile
 8002c56:	f3ef 8211 	mrs	r2, BASEPRI
 8002c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c5e:	f383 8811 	msr	BASEPRI, r3
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	f3bf 8f4f 	dsb	sy
 8002c6a:	61ba      	str	r2, [r7, #24]
 8002c6c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002c6e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c76:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d02f      	beq.n	8002cde <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c88:	68b9      	ldr	r1, [r7, #8]
 8002c8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c8c:	f000 f8b6 	bl	8002dfc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c92:	1e5a      	subs	r2, r3, #1
 8002c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c96:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002c98:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca0:	d112      	bne.n	8002cc8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d016      	beq.n	8002cd8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cac:	3310      	adds	r3, #16
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fd62 	bl	8003778 <xTaskRemoveFromEventList>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00e      	beq.n	8002cd8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00b      	beq.n	8002cd8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e007      	b.n	8002cd8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ccc:	3301      	adds	r3, #1
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	b25a      	sxtb	r2, r3
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cdc:	e001      	b.n	8002ce2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f383 8811 	msr	BASEPRI, r3
}
 8002cec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3738      	adds	r7, #56	@ 0x38
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d006      	beq.n	8002d16 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f1c3 0307 	rsb	r3, r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	e001      	b.n	8002d1a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
	}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10d      	bne.n	8002d62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d14d      	bne.n	8002dea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 ff64 	bl	8003c20 <xTaskPriorityDisinherit>
 8002d58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	e043      	b.n	8002dea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d119      	bne.n	8002d9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6858      	ldr	r0, [r3, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	461a      	mov	r2, r3
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	f001 fd54 	bl	8004820 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	441a      	add	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d32b      	bcc.n	8002dea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	e026      	b.n	8002dea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	68d8      	ldr	r0, [r3, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da4:	461a      	mov	r2, r3
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	f001 fd3a 	bl	8004820 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	425b      	negs	r3, r3
 8002db6:	441a      	add	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d207      	bcs.n	8002dd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	425b      	negs	r3, r3
 8002dd2:	441a      	add	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d105      	bne.n	8002dea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002df2:	697b      	ldr	r3, [r7, #20]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d018      	beq.n	8002e40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	441a      	add	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d303      	bcc.n	8002e30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68d9      	ldr	r1, [r3, #12]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	461a      	mov	r2, r3
 8002e3a:	6838      	ldr	r0, [r7, #0]
 8002e3c:	f001 fcf0 	bl	8004820 <memcpy>
	}
}
 8002e40:	bf00      	nop
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e50:	f001 f9aa 	bl	80041a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e5c:	e011      	b.n	8002e82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d012      	beq.n	8002e8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3324      	adds	r3, #36	@ 0x24
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fc84 	bl	8003778 <xTaskRemoveFromEventList>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e76:	f000 fd5d 	bl	8003934 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	dce9      	bgt.n	8002e5e <prvUnlockQueue+0x16>
 8002e8a:	e000      	b.n	8002e8e <prvUnlockQueue+0x46>
					break;
 8002e8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	22ff      	movs	r2, #255	@ 0xff
 8002e92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002e96:	f001 f9b9 	bl	800420c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e9a:	f001 f985 	bl	80041a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ea4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ea6:	e011      	b.n	8002ecc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d012      	beq.n	8002ed6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3310      	adds	r3, #16
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fc5f 	bl	8003778 <xTaskRemoveFromEventList>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ec0:	f000 fd38 	bl	8003934 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ec4:	7bbb      	ldrb	r3, [r7, #14]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	dce9      	bgt.n	8002ea8 <prvUnlockQueue+0x60>
 8002ed4:	e000      	b.n	8002ed8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ed6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	22ff      	movs	r2, #255	@ 0xff
 8002edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002ee0:	f001 f994 	bl	800420c <vPortExitCritical>
}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ef4:	f001 f958 	bl	80041a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f00:	2301      	movs	r3, #1
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	e001      	b.n	8002f0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f0a:	f001 f97f 	bl	800420c <vPortExitCritical>

	return xReturn;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f20:	f001 f942 	bl	80041a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d102      	bne.n	8002f36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f30:	2301      	movs	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	e001      	b.n	8002f3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f3a:	f001 f967 	bl	800420c <vPortExitCritical>

	return xReturn;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08e      	sub	sp, #56	@ 0x38
 8002f4c:	af04      	add	r7, sp, #16
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10b      	bne.n	8002f74 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	623b      	str	r3, [r7, #32]
}
 8002f6e:	bf00      	nop
 8002f70:	bf00      	nop
 8002f72:	e7fd      	b.n	8002f70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10b      	bne.n	8002f92 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	61fb      	str	r3, [r7, #28]
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	e7fd      	b.n	8002f8e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f92:	2354      	movs	r3, #84	@ 0x54
 8002f94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b54      	cmp	r3, #84	@ 0x54
 8002f9a:	d00b      	beq.n	8002fb4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	61bb      	str	r3, [r7, #24]
}
 8002fae:	bf00      	nop
 8002fb0:	bf00      	nop
 8002fb2:	e7fd      	b.n	8002fb0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002fb4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01e      	beq.n	8002ffa <xTaskCreateStatic+0xb2>
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d01b      	beq.n	8002ffa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	9303      	str	r3, [sp, #12]
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	9302      	str	r3, [sp, #8]
 8002fdc:	f107 0314 	add.w	r3, r7, #20
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	68b9      	ldr	r1, [r7, #8]
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f850 	bl	8003092 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ff2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ff4:	f000 f8d6 	bl	80031a4 <prvAddNewTaskToReadyList>
 8002ff8:	e001      	b.n	8002ffe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ffe:	697b      	ldr	r3, [r7, #20]
	}
 8003000:	4618      	mov	r0, r3
 8003002:	3728      	adds	r7, #40	@ 0x28
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08c      	sub	sp, #48	@ 0x30
 800300c:	af04      	add	r7, sp, #16
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4618      	mov	r0, r3
 800301e:	f001 f9e5 	bl	80043ec <pvPortMalloc>
 8003022:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00e      	beq.n	8003048 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800302a:	2054      	movs	r0, #84	@ 0x54
 800302c:	f001 f9de 	bl	80043ec <pvPortMalloc>
 8003030:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	631a      	str	r2, [r3, #48]	@ 0x30
 800303e:	e005      	b.n	800304c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003040:	6978      	ldr	r0, [r7, #20]
 8003042:	f001 faa1 	bl	8004588 <vPortFree>
 8003046:	e001      	b.n	800304c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003048:	2300      	movs	r3, #0
 800304a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d017      	beq.n	8003082 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800305a:	88fa      	ldrh	r2, [r7, #6]
 800305c:	2300      	movs	r3, #0
 800305e:	9303      	str	r3, [sp, #12]
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	9302      	str	r3, [sp, #8]
 8003064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f80e 	bl	8003092 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003076:	69f8      	ldr	r0, [r7, #28]
 8003078:	f000 f894 	bl	80031a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800307c:	2301      	movs	r3, #1
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	e002      	b.n	8003088 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003082:	f04f 33ff 	mov.w	r3, #4294967295
 8003086:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003088:	69bb      	ldr	r3, [r7, #24]
	}
 800308a:	4618      	mov	r0, r3
 800308c:	3720      	adds	r7, #32
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b088      	sub	sp, #32
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80030aa:	3b01      	subs	r3, #1
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	f023 0307 	bic.w	r3, r3, #7
 80030b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00b      	beq.n	80030dc <prvInitialiseNewTask+0x4a>
	__asm volatile
 80030c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	617b      	str	r3, [r7, #20]
}
 80030d6:	bf00      	nop
 80030d8:	bf00      	nop
 80030da:	e7fd      	b.n	80030d8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01f      	beq.n	8003122 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	e012      	b.n	800310e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	4413      	add	r3, r2
 80030ee:	7819      	ldrb	r1, [r3, #0]
 80030f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	4413      	add	r3, r2
 80030f6:	3334      	adds	r3, #52	@ 0x34
 80030f8:	460a      	mov	r2, r1
 80030fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	4413      	add	r3, r2
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d006      	beq.n	8003116 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	3301      	adds	r3, #1
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	2b0f      	cmp	r3, #15
 8003112:	d9e9      	bls.n	80030e8 <prvInitialiseNewTask+0x56>
 8003114:	e000      	b.n	8003118 <prvInitialiseNewTask+0x86>
			{
				break;
 8003116:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003120:	e003      	b.n	800312a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800312a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312c:	2b06      	cmp	r3, #6
 800312e:	d901      	bls.n	8003134 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003130:	2306      	movs	r3, #6
 8003132:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003136:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003138:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800313a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800313e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003142:	2200      	movs	r2, #0
 8003144:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003148:	3304      	adds	r3, #4
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff f8da 	bl	8002304 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003152:	3318      	adds	r3, #24
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff f8d5 	bl	8002304 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800315a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800315e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003162:	f1c3 0207 	rsb	r2, r3, #7
 8003166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003168:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800316a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800316e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003172:	2200      	movs	r2, #0
 8003174:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	68f9      	ldr	r1, [r7, #12]
 8003182:	69b8      	ldr	r0, [r7, #24]
 8003184:	f000 fede 	bl	8003f44 <pxPortInitialiseStack>
 8003188:	4602      	mov	r2, r0
 800318a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800318e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003198:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800319a:	bf00      	nop
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031ac:	f000 fffc 	bl	80041a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031b0:	4b2a      	ldr	r3, [pc, #168]	@ (800325c <prvAddNewTaskToReadyList+0xb8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3301      	adds	r3, #1
 80031b6:	4a29      	ldr	r2, [pc, #164]	@ (800325c <prvAddNewTaskToReadyList+0xb8>)
 80031b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031ba:	4b29      	ldr	r3, [pc, #164]	@ (8003260 <prvAddNewTaskToReadyList+0xbc>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d109      	bne.n	80031d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031c2:	4a27      	ldr	r2, [pc, #156]	@ (8003260 <prvAddNewTaskToReadyList+0xbc>)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031c8:	4b24      	ldr	r3, [pc, #144]	@ (800325c <prvAddNewTaskToReadyList+0xb8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d110      	bne.n	80031f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80031d0:	f000 fbd4 	bl	800397c <prvInitialiseTaskLists>
 80031d4:	e00d      	b.n	80031f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80031d6:	4b23      	ldr	r3, [pc, #140]	@ (8003264 <prvAddNewTaskToReadyList+0xc0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031de:	4b20      	ldr	r3, [pc, #128]	@ (8003260 <prvAddNewTaskToReadyList+0xbc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d802      	bhi.n	80031f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80031ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003260 <prvAddNewTaskToReadyList+0xbc>)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80031f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003268 <prvAddNewTaskToReadyList+0xc4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3301      	adds	r3, #1
 80031f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003268 <prvAddNewTaskToReadyList+0xc4>)
 80031fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003200:	2201      	movs	r2, #1
 8003202:	409a      	lsls	r2, r3
 8003204:	4b19      	ldr	r3, [pc, #100]	@ (800326c <prvAddNewTaskToReadyList+0xc8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4313      	orrs	r3, r2
 800320a:	4a18      	ldr	r2, [pc, #96]	@ (800326c <prvAddNewTaskToReadyList+0xc8>)
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4a15      	ldr	r2, [pc, #84]	@ (8003270 <prvAddNewTaskToReadyList+0xcc>)
 800321c:	441a      	add	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3304      	adds	r3, #4
 8003222:	4619      	mov	r1, r3
 8003224:	4610      	mov	r0, r2
 8003226:	f7ff f87a 	bl	800231e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800322a:	f000 ffef 	bl	800420c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800322e:	4b0d      	ldr	r3, [pc, #52]	@ (8003264 <prvAddNewTaskToReadyList+0xc0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00e      	beq.n	8003254 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003236:	4b0a      	ldr	r3, [pc, #40]	@ (8003260 <prvAddNewTaskToReadyList+0xbc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003240:	429a      	cmp	r2, r3
 8003242:	d207      	bcs.n	8003254 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <prvAddNewTaskToReadyList+0xd0>)
 8003246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	200003d8 	.word	0x200003d8
 8003260:	200002d8 	.word	0x200002d8
 8003264:	200003e4 	.word	0x200003e4
 8003268:	200003f4 	.word	0x200003f4
 800326c:	200003e0 	.word	0x200003e0
 8003270:	200002dc 	.word	0x200002dc
 8003274:	e000ed04 	.word	0xe000ed04

08003278 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d018      	beq.n	80032bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800328a:	4b14      	ldr	r3, [pc, #80]	@ (80032dc <vTaskDelay+0x64>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00b      	beq.n	80032aa <vTaskDelay+0x32>
	__asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	60bb      	str	r3, [r7, #8]
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	e7fd      	b.n	80032a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80032aa:	f000 f87d 	bl	80033a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032ae:	2100      	movs	r1, #0
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 fde1 	bl	8003e78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80032b6:	f000 f885 	bl	80033c4 <xTaskResumeAll>
 80032ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d107      	bne.n	80032d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80032c2:	4b07      	ldr	r3, [pc, #28]	@ (80032e0 <vTaskDelay+0x68>)
 80032c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000400 	.word	0x20000400
 80032e0:	e000ed04 	.word	0xe000ed04

080032e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	@ 0x28
 80032e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80032f2:	463a      	mov	r2, r7
 80032f4:	1d39      	adds	r1, r7, #4
 80032f6:	f107 0308 	add.w	r3, r7, #8
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd f91e 	bl	800053c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003300:	6839      	ldr	r1, [r7, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	9202      	str	r2, [sp, #8]
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	2300      	movs	r3, #0
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	2300      	movs	r3, #0
 8003310:	460a      	mov	r2, r1
 8003312:	491f      	ldr	r1, [pc, #124]	@ (8003390 <vTaskStartScheduler+0xac>)
 8003314:	481f      	ldr	r0, [pc, #124]	@ (8003394 <vTaskStartScheduler+0xb0>)
 8003316:	f7ff fe17 	bl	8002f48 <xTaskCreateStatic>
 800331a:	4603      	mov	r3, r0
 800331c:	4a1e      	ldr	r2, [pc, #120]	@ (8003398 <vTaskStartScheduler+0xb4>)
 800331e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003320:	4b1d      	ldr	r3, [pc, #116]	@ (8003398 <vTaskStartScheduler+0xb4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003328:	2301      	movs	r3, #1
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	e001      	b.n	8003332 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d116      	bne.n	8003366 <vTaskStartScheduler+0x82>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	613b      	str	r3, [r7, #16]
}
 800334a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800334c:	4b13      	ldr	r3, [pc, #76]	@ (800339c <vTaskStartScheduler+0xb8>)
 800334e:	f04f 32ff 	mov.w	r2, #4294967295
 8003352:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003354:	4b12      	ldr	r3, [pc, #72]	@ (80033a0 <vTaskStartScheduler+0xbc>)
 8003356:	2201      	movs	r2, #1
 8003358:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800335a:	4b12      	ldr	r3, [pc, #72]	@ (80033a4 <vTaskStartScheduler+0xc0>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003360:	f000 fe7e 	bl	8004060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003364:	e00f      	b.n	8003386 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d10b      	bne.n	8003386 <vTaskStartScheduler+0xa2>
	__asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	60fb      	str	r3, [r7, #12]
}
 8003380:	bf00      	nop
 8003382:	bf00      	nop
 8003384:	e7fd      	b.n	8003382 <vTaskStartScheduler+0x9e>
}
 8003386:	bf00      	nop
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	0800489c 	.word	0x0800489c
 8003394:	0800394d 	.word	0x0800394d
 8003398:	200003fc 	.word	0x200003fc
 800339c:	200003f8 	.word	0x200003f8
 80033a0:	200003e4 	.word	0x200003e4
 80033a4:	200003dc 	.word	0x200003dc

080033a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80033ac:	4b04      	ldr	r3, [pc, #16]	@ (80033c0 <vTaskSuspendAll+0x18>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3301      	adds	r3, #1
 80033b2:	4a03      	ldr	r2, [pc, #12]	@ (80033c0 <vTaskSuspendAll+0x18>)
 80033b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	20000400 	.word	0x20000400

080033c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033d2:	4b42      	ldr	r3, [pc, #264]	@ (80034dc <xTaskResumeAll+0x118>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10b      	bne.n	80033f2 <xTaskResumeAll+0x2e>
	__asm volatile
 80033da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	603b      	str	r3, [r7, #0]
}
 80033ec:	bf00      	nop
 80033ee:	bf00      	nop
 80033f0:	e7fd      	b.n	80033ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80033f2:	f000 fed9 	bl	80041a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80033f6:	4b39      	ldr	r3, [pc, #228]	@ (80034dc <xTaskResumeAll+0x118>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	4a37      	ldr	r2, [pc, #220]	@ (80034dc <xTaskResumeAll+0x118>)
 80033fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003400:	4b36      	ldr	r3, [pc, #216]	@ (80034dc <xTaskResumeAll+0x118>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d161      	bne.n	80034cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003408:	4b35      	ldr	r3, [pc, #212]	@ (80034e0 <xTaskResumeAll+0x11c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d05d      	beq.n	80034cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003410:	e02e      	b.n	8003470 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003412:	4b34      	ldr	r3, [pc, #208]	@ (80034e4 <xTaskResumeAll+0x120>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3318      	adds	r3, #24
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe ffda 	bl	80023d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3304      	adds	r3, #4
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe ffd5 	bl	80023d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003432:	2201      	movs	r2, #1
 8003434:	409a      	lsls	r2, r3
 8003436:	4b2c      	ldr	r3, [pc, #176]	@ (80034e8 <xTaskResumeAll+0x124>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4313      	orrs	r3, r2
 800343c:	4a2a      	ldr	r2, [pc, #168]	@ (80034e8 <xTaskResumeAll+0x124>)
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4a27      	ldr	r2, [pc, #156]	@ (80034ec <xTaskResumeAll+0x128>)
 800344e:	441a      	add	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3304      	adds	r3, #4
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f7fe ff61 	bl	800231e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003460:	4b23      	ldr	r3, [pc, #140]	@ (80034f0 <xTaskResumeAll+0x12c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003466:	429a      	cmp	r2, r3
 8003468:	d302      	bcc.n	8003470 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800346a:	4b22      	ldr	r3, [pc, #136]	@ (80034f4 <xTaskResumeAll+0x130>)
 800346c:	2201      	movs	r2, #1
 800346e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003470:	4b1c      	ldr	r3, [pc, #112]	@ (80034e4 <xTaskResumeAll+0x120>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1cc      	bne.n	8003412 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800347e:	f000 fb1b 	bl	8003ab8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003482:	4b1d      	ldr	r3, [pc, #116]	@ (80034f8 <xTaskResumeAll+0x134>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d010      	beq.n	80034b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800348e:	f000 f837 	bl	8003500 <xTaskIncrementTick>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003498:	4b16      	ldr	r3, [pc, #88]	@ (80034f4 <xTaskResumeAll+0x130>)
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f1      	bne.n	800348e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80034aa:	4b13      	ldr	r3, [pc, #76]	@ (80034f8 <xTaskResumeAll+0x134>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034b0:	4b10      	ldr	r3, [pc, #64]	@ (80034f4 <xTaskResumeAll+0x130>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d009      	beq.n	80034cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80034b8:	2301      	movs	r3, #1
 80034ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034bc:	4b0f      	ldr	r3, [pc, #60]	@ (80034fc <xTaskResumeAll+0x138>)
 80034be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034cc:	f000 fe9e 	bl	800420c <vPortExitCritical>

	return xAlreadyYielded;
 80034d0:	68bb      	ldr	r3, [r7, #8]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000400 	.word	0x20000400
 80034e0:	200003d8 	.word	0x200003d8
 80034e4:	20000398 	.word	0x20000398
 80034e8:	200003e0 	.word	0x200003e0
 80034ec:	200002dc 	.word	0x200002dc
 80034f0:	200002d8 	.word	0x200002d8
 80034f4:	200003ec 	.word	0x200003ec
 80034f8:	200003e8 	.word	0x200003e8
 80034fc:	e000ed04 	.word	0xe000ed04

08003500 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800350a:	4b4f      	ldr	r3, [pc, #316]	@ (8003648 <xTaskIncrementTick+0x148>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f040 808f 	bne.w	8003632 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003514:	4b4d      	ldr	r3, [pc, #308]	@ (800364c <xTaskIncrementTick+0x14c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800351c:	4a4b      	ldr	r2, [pc, #300]	@ (800364c <xTaskIncrementTick+0x14c>)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d121      	bne.n	800356c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003528:	4b49      	ldr	r3, [pc, #292]	@ (8003650 <xTaskIncrementTick+0x150>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	603b      	str	r3, [r7, #0]
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop
 8003548:	e7fd      	b.n	8003546 <xTaskIncrementTick+0x46>
 800354a:	4b41      	ldr	r3, [pc, #260]	@ (8003650 <xTaskIncrementTick+0x150>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	4b40      	ldr	r3, [pc, #256]	@ (8003654 <xTaskIncrementTick+0x154>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a3e      	ldr	r2, [pc, #248]	@ (8003650 <xTaskIncrementTick+0x150>)
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	4a3e      	ldr	r2, [pc, #248]	@ (8003654 <xTaskIncrementTick+0x154>)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	4b3e      	ldr	r3, [pc, #248]	@ (8003658 <xTaskIncrementTick+0x158>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3301      	adds	r3, #1
 8003564:	4a3c      	ldr	r2, [pc, #240]	@ (8003658 <xTaskIncrementTick+0x158>)
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	f000 faa6 	bl	8003ab8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800356c:	4b3b      	ldr	r3, [pc, #236]	@ (800365c <xTaskIncrementTick+0x15c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	429a      	cmp	r2, r3
 8003574:	d348      	bcc.n	8003608 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003576:	4b36      	ldr	r3, [pc, #216]	@ (8003650 <xTaskIncrementTick+0x150>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d104      	bne.n	800358a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003580:	4b36      	ldr	r3, [pc, #216]	@ (800365c <xTaskIncrementTick+0x15c>)
 8003582:	f04f 32ff 	mov.w	r2, #4294967295
 8003586:	601a      	str	r2, [r3, #0]
					break;
 8003588:	e03e      	b.n	8003608 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800358a:	4b31      	ldr	r3, [pc, #196]	@ (8003650 <xTaskIncrementTick+0x150>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d203      	bcs.n	80035aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035a2:	4a2e      	ldr	r2, [pc, #184]	@ (800365c <xTaskIncrementTick+0x15c>)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035a8:	e02e      	b.n	8003608 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	3304      	adds	r3, #4
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe ff12 	bl	80023d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d004      	beq.n	80035c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	3318      	adds	r3, #24
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe ff09 	bl	80023d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ca:	2201      	movs	r2, #1
 80035cc:	409a      	lsls	r2, r3
 80035ce:	4b24      	ldr	r3, [pc, #144]	@ (8003660 <xTaskIncrementTick+0x160>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	4a22      	ldr	r2, [pc, #136]	@ (8003660 <xTaskIncrementTick+0x160>)
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003664 <xTaskIncrementTick+0x164>)
 80035e6:	441a      	add	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4619      	mov	r1, r3
 80035ee:	4610      	mov	r0, r2
 80035f0:	f7fe fe95 	bl	800231e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003668 <xTaskIncrementTick+0x168>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fe:	429a      	cmp	r2, r3
 8003600:	d3b9      	bcc.n	8003576 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003602:	2301      	movs	r3, #1
 8003604:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003606:	e7b6      	b.n	8003576 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003608:	4b17      	ldr	r3, [pc, #92]	@ (8003668 <xTaskIncrementTick+0x168>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800360e:	4915      	ldr	r1, [pc, #84]	@ (8003664 <xTaskIncrementTick+0x164>)
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d901      	bls.n	8003624 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003620:	2301      	movs	r3, #1
 8003622:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003624:	4b11      	ldr	r3, [pc, #68]	@ (800366c <xTaskIncrementTick+0x16c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d007      	beq.n	800363c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800362c:	2301      	movs	r3, #1
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	e004      	b.n	800363c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003632:	4b0f      	ldr	r3, [pc, #60]	@ (8003670 <xTaskIncrementTick+0x170>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3301      	adds	r3, #1
 8003638:	4a0d      	ldr	r2, [pc, #52]	@ (8003670 <xTaskIncrementTick+0x170>)
 800363a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800363c:	697b      	ldr	r3, [r7, #20]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20000400 	.word	0x20000400
 800364c:	200003dc 	.word	0x200003dc
 8003650:	20000390 	.word	0x20000390
 8003654:	20000394 	.word	0x20000394
 8003658:	200003f0 	.word	0x200003f0
 800365c:	200003f8 	.word	0x200003f8
 8003660:	200003e0 	.word	0x200003e0
 8003664:	200002dc 	.word	0x200002dc
 8003668:	200002d8 	.word	0x200002d8
 800366c:	200003ec 	.word	0x200003ec
 8003670:	200003e8 	.word	0x200003e8

08003674 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800367a:	4b27      	ldr	r3, [pc, #156]	@ (8003718 <vTaskSwitchContext+0xa4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003682:	4b26      	ldr	r3, [pc, #152]	@ (800371c <vTaskSwitchContext+0xa8>)
 8003684:	2201      	movs	r2, #1
 8003686:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003688:	e040      	b.n	800370c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800368a:	4b24      	ldr	r3, [pc, #144]	@ (800371c <vTaskSwitchContext+0xa8>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003690:	4b23      	ldr	r3, [pc, #140]	@ (8003720 <vTaskSwitchContext+0xac>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800369e:	7afb      	ldrb	r3, [r7, #11]
 80036a0:	f1c3 031f 	rsb	r3, r3, #31
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	491f      	ldr	r1, [pc, #124]	@ (8003724 <vTaskSwitchContext+0xb0>)
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10b      	bne.n	80036d2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80036ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	607b      	str	r3, [r7, #4]
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	e7fd      	b.n	80036ce <vTaskSwitchContext+0x5a>
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4a11      	ldr	r2, [pc, #68]	@ (8003724 <vTaskSwitchContext+0xb0>)
 80036de:	4413      	add	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	605a      	str	r2, [r3, #4]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	3308      	adds	r3, #8
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d104      	bne.n	8003702 <vTaskSwitchContext+0x8e>
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a07      	ldr	r2, [pc, #28]	@ (8003728 <vTaskSwitchContext+0xb4>)
 800370a:	6013      	str	r3, [r2, #0]
}
 800370c:	bf00      	nop
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	20000400 	.word	0x20000400
 800371c:	200003ec 	.word	0x200003ec
 8003720:	200003e0 	.word	0x200003e0
 8003724:	200002dc 	.word	0x200002dc
 8003728:	200002d8 	.word	0x200002d8

0800372c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10b      	bne.n	8003754 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800373c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	60fb      	str	r3, [r7, #12]
}
 800374e:	bf00      	nop
 8003750:	bf00      	nop
 8003752:	e7fd      	b.n	8003750 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003754:	4b07      	ldr	r3, [pc, #28]	@ (8003774 <vTaskPlaceOnEventList+0x48>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3318      	adds	r3, #24
 800375a:	4619      	mov	r1, r3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7fe fe02 	bl	8002366 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003762:	2101      	movs	r1, #1
 8003764:	6838      	ldr	r0, [r7, #0]
 8003766:	f000 fb87 	bl	8003e78 <prvAddCurrentTaskToDelayedList>
}
 800376a:	bf00      	nop
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	200002d8 	.word	0x200002d8

08003778 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10b      	bne.n	80037a6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	60fb      	str	r3, [r7, #12]
}
 80037a0:	bf00      	nop
 80037a2:	bf00      	nop
 80037a4:	e7fd      	b.n	80037a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	3318      	adds	r3, #24
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe fe14 	bl	80023d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003828 <xTaskRemoveFromEventList+0xb0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d11c      	bne.n	80037f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	3304      	adds	r3, #4
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fe fe0b 	bl	80023d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c6:	2201      	movs	r2, #1
 80037c8:	409a      	lsls	r2, r3
 80037ca:	4b18      	ldr	r3, [pc, #96]	@ (800382c <xTaskRemoveFromEventList+0xb4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	4a16      	ldr	r2, [pc, #88]	@ (800382c <xTaskRemoveFromEventList+0xb4>)
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4a13      	ldr	r2, [pc, #76]	@ (8003830 <xTaskRemoveFromEventList+0xb8>)
 80037e2:	441a      	add	r2, r3
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	3304      	adds	r3, #4
 80037e8:	4619      	mov	r1, r3
 80037ea:	4610      	mov	r0, r2
 80037ec:	f7fe fd97 	bl	800231e <vListInsertEnd>
 80037f0:	e005      	b.n	80037fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	3318      	adds	r3, #24
 80037f6:	4619      	mov	r1, r3
 80037f8:	480e      	ldr	r0, [pc, #56]	@ (8003834 <xTaskRemoveFromEventList+0xbc>)
 80037fa:	f7fe fd90 	bl	800231e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003802:	4b0d      	ldr	r3, [pc, #52]	@ (8003838 <xTaskRemoveFromEventList+0xc0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003808:	429a      	cmp	r2, r3
 800380a:	d905      	bls.n	8003818 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800380c:	2301      	movs	r3, #1
 800380e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003810:	4b0a      	ldr	r3, [pc, #40]	@ (800383c <xTaskRemoveFromEventList+0xc4>)
 8003812:	2201      	movs	r2, #1
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	e001      	b.n	800381c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800381c:	697b      	ldr	r3, [r7, #20]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000400 	.word	0x20000400
 800382c:	200003e0 	.word	0x200003e0
 8003830:	200002dc 	.word	0x200002dc
 8003834:	20000398 	.word	0x20000398
 8003838:	200002d8 	.word	0x200002d8
 800383c:	200003ec 	.word	0x200003ec

08003840 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003848:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <vTaskInternalSetTimeOutState+0x24>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003850:	4b05      	ldr	r3, [pc, #20]	@ (8003868 <vTaskInternalSetTimeOutState+0x28>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	605a      	str	r2, [r3, #4]
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	200003f0 	.word	0x200003f0
 8003868:	200003dc 	.word	0x200003dc

0800386c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10b      	bne.n	8003894 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800387c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003880:	f383 8811 	msr	BASEPRI, r3
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	613b      	str	r3, [r7, #16]
}
 800388e:	bf00      	nop
 8003890:	bf00      	nop
 8003892:	e7fd      	b.n	8003890 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10b      	bne.n	80038b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800389a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800389e:	f383 8811 	msr	BASEPRI, r3
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	60fb      	str	r3, [r7, #12]
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	e7fd      	b.n	80038ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80038b2:	f000 fc79 	bl	80041a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80038b6:	4b1d      	ldr	r3, [pc, #116]	@ (800392c <xTaskCheckForTimeOut+0xc0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ce:	d102      	bne.n	80038d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	e023      	b.n	800391e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	4b15      	ldr	r3, [pc, #84]	@ (8003930 <xTaskCheckForTimeOut+0xc4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d007      	beq.n	80038f2 <xTaskCheckForTimeOut+0x86>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d302      	bcc.n	80038f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80038ec:	2301      	movs	r3, #1
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	e015      	b.n	800391e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d20b      	bcs.n	8003914 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	1ad2      	subs	r2, r2, r3
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff ff99 	bl	8003840 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
 8003912:	e004      	b.n	800391e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800391a:	2301      	movs	r3, #1
 800391c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800391e:	f000 fc75 	bl	800420c <vPortExitCritical>

	return xReturn;
 8003922:	69fb      	ldr	r3, [r7, #28]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3720      	adds	r7, #32
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	200003dc 	.word	0x200003dc
 8003930:	200003f0 	.word	0x200003f0

08003934 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003938:	4b03      	ldr	r3, [pc, #12]	@ (8003948 <vTaskMissedYield+0x14>)
 800393a:	2201      	movs	r2, #1
 800393c:	601a      	str	r2, [r3, #0]
}
 800393e:	bf00      	nop
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	200003ec 	.word	0x200003ec

0800394c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003954:	f000 f852 	bl	80039fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003958:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <prvIdleTask+0x28>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d9f9      	bls.n	8003954 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003960:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <prvIdleTask+0x2c>)
 8003962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003970:	e7f0      	b.n	8003954 <prvIdleTask+0x8>
 8003972:	bf00      	nop
 8003974:	200002dc 	.word	0x200002dc
 8003978:	e000ed04 	.word	0xe000ed04

0800397c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003982:	2300      	movs	r3, #0
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	e00c      	b.n	80039a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4a12      	ldr	r2, [pc, #72]	@ (80039dc <prvInitialiseTaskLists+0x60>)
 8003994:	4413      	add	r3, r2
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe fc94 	bl	80022c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3301      	adds	r3, #1
 80039a0:	607b      	str	r3, [r7, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b06      	cmp	r3, #6
 80039a6:	d9ef      	bls.n	8003988 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80039a8:	480d      	ldr	r0, [pc, #52]	@ (80039e0 <prvInitialiseTaskLists+0x64>)
 80039aa:	f7fe fc8b 	bl	80022c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039ae:	480d      	ldr	r0, [pc, #52]	@ (80039e4 <prvInitialiseTaskLists+0x68>)
 80039b0:	f7fe fc88 	bl	80022c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039b4:	480c      	ldr	r0, [pc, #48]	@ (80039e8 <prvInitialiseTaskLists+0x6c>)
 80039b6:	f7fe fc85 	bl	80022c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039ba:	480c      	ldr	r0, [pc, #48]	@ (80039ec <prvInitialiseTaskLists+0x70>)
 80039bc:	f7fe fc82 	bl	80022c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039c0:	480b      	ldr	r0, [pc, #44]	@ (80039f0 <prvInitialiseTaskLists+0x74>)
 80039c2:	f7fe fc7f 	bl	80022c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039c6:	4b0b      	ldr	r3, [pc, #44]	@ (80039f4 <prvInitialiseTaskLists+0x78>)
 80039c8:	4a05      	ldr	r2, [pc, #20]	@ (80039e0 <prvInitialiseTaskLists+0x64>)
 80039ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039cc:	4b0a      	ldr	r3, [pc, #40]	@ (80039f8 <prvInitialiseTaskLists+0x7c>)
 80039ce:	4a05      	ldr	r2, [pc, #20]	@ (80039e4 <prvInitialiseTaskLists+0x68>)
 80039d0:	601a      	str	r2, [r3, #0]
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200002dc 	.word	0x200002dc
 80039e0:	20000368 	.word	0x20000368
 80039e4:	2000037c 	.word	0x2000037c
 80039e8:	20000398 	.word	0x20000398
 80039ec:	200003ac 	.word	0x200003ac
 80039f0:	200003c4 	.word	0x200003c4
 80039f4:	20000390 	.word	0x20000390
 80039f8:	20000394 	.word	0x20000394

080039fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a02:	e019      	b.n	8003a38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a04:	f000 fbd0 	bl	80041a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a08:	4b10      	ldr	r3, [pc, #64]	@ (8003a4c <prvCheckTasksWaitingTermination+0x50>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3304      	adds	r3, #4
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe fcdf 	bl	80023d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a50 <prvCheckTasksWaitingTermination+0x54>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	4a0b      	ldr	r2, [pc, #44]	@ (8003a50 <prvCheckTasksWaitingTermination+0x54>)
 8003a22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a24:	4b0b      	ldr	r3, [pc, #44]	@ (8003a54 <prvCheckTasksWaitingTermination+0x58>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a54 <prvCheckTasksWaitingTermination+0x58>)
 8003a2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a2e:	f000 fbed 	bl	800420c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f810 	bl	8003a58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a38:	4b06      	ldr	r3, [pc, #24]	@ (8003a54 <prvCheckTasksWaitingTermination+0x58>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e1      	bne.n	8003a04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a40:	bf00      	nop
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200003ac 	.word	0x200003ac
 8003a50:	200003d8 	.word	0x200003d8
 8003a54:	200003c0 	.word	0x200003c0

08003a58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d108      	bne.n	8003a7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fd8a 	bl	8004588 <vPortFree>
				vPortFree( pxTCB );
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fd87 	bl	8004588 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a7a:	e019      	b.n	8003ab0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d103      	bne.n	8003a8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fd7e 	bl	8004588 <vPortFree>
	}
 8003a8c:	e010      	b.n	8003ab0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d00b      	beq.n	8003ab0 <prvDeleteTCB+0x58>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	60fb      	str	r3, [r7, #12]
}
 8003aaa:	bf00      	nop
 8003aac:	bf00      	nop
 8003aae:	e7fd      	b.n	8003aac <prvDeleteTCB+0x54>
	}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003abe:	4b0c      	ldr	r3, [pc, #48]	@ (8003af0 <prvResetNextTaskUnblockTime+0x38>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d104      	bne.n	8003ad2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8003af4 <prvResetNextTaskUnblockTime+0x3c>)
 8003aca:	f04f 32ff 	mov.w	r2, #4294967295
 8003ace:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ad0:	e008      	b.n	8003ae4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ad2:	4b07      	ldr	r3, [pc, #28]	@ (8003af0 <prvResetNextTaskUnblockTime+0x38>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4a04      	ldr	r2, [pc, #16]	@ (8003af4 <prvResetNextTaskUnblockTime+0x3c>)
 8003ae2:	6013      	str	r3, [r2, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	20000390 	.word	0x20000390
 8003af4:	200003f8 	.word	0x200003f8

08003af8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003afe:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <xTaskGetSchedulerState+0x34>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b06:	2301      	movs	r3, #1
 8003b08:	607b      	str	r3, [r7, #4]
 8003b0a:	e008      	b.n	8003b1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b0c:	4b08      	ldr	r3, [pc, #32]	@ (8003b30 <xTaskGetSchedulerState+0x38>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d102      	bne.n	8003b1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b14:	2302      	movs	r3, #2
 8003b16:	607b      	str	r3, [r7, #4]
 8003b18:	e001      	b.n	8003b1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b1e:	687b      	ldr	r3, [r7, #4]
	}
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	200003e4 	.word	0x200003e4
 8003b30:	20000400 	.word	0x20000400

08003b34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d05e      	beq.n	8003c08 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b4e:	4b31      	ldr	r3, [pc, #196]	@ (8003c14 <xTaskPriorityInherit+0xe0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d24e      	bcs.n	8003bf6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	db06      	blt.n	8003b6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b60:	4b2c      	ldr	r3, [pc, #176]	@ (8003c14 <xTaskPriorityInherit+0xe0>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b66:	f1c3 0207 	rsb	r2, r3, #7
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	6959      	ldr	r1, [r3, #20]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4a26      	ldr	r2, [pc, #152]	@ (8003c18 <xTaskPriorityInherit+0xe4>)
 8003b80:	4413      	add	r3, r2
 8003b82:	4299      	cmp	r1, r3
 8003b84:	d12f      	bne.n	8003be6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe fc24 	bl	80023d8 <uxListRemove>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10a      	bne.n	8003bac <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43da      	mvns	r2, r3
 8003ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c1c <xTaskPriorityInherit+0xe8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c1c <xTaskPriorityInherit+0xe8>)
 8003baa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003bac:	4b19      	ldr	r3, [pc, #100]	@ (8003c14 <xTaskPriorityInherit+0xe0>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bba:	2201      	movs	r2, #1
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	4b17      	ldr	r3, [pc, #92]	@ (8003c1c <xTaskPriorityInherit+0xe8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	4a15      	ldr	r2, [pc, #84]	@ (8003c1c <xTaskPriorityInherit+0xe8>)
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4a10      	ldr	r2, [pc, #64]	@ (8003c18 <xTaskPriorityInherit+0xe4>)
 8003bd6:	441a      	add	r2, r3
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4610      	mov	r0, r2
 8003be0:	f7fe fb9d 	bl	800231e <vListInsertEnd>
 8003be4:	e004      	b.n	8003bf0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003be6:	4b0b      	ldr	r3, [pc, #44]	@ (8003c14 <xTaskPriorityInherit+0xe0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	e008      	b.n	8003c08 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bfa:	4b06      	ldr	r3, [pc, #24]	@ (8003c14 <xTaskPriorityInherit+0xe0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d201      	bcs.n	8003c08 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003c04:	2301      	movs	r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c08:	68fb      	ldr	r3, [r7, #12]
	}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	200002d8 	.word	0x200002d8
 8003c18:	200002dc 	.word	0x200002dc
 8003c1c:	200003e0 	.word	0x200003e0

08003c20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d070      	beq.n	8003d18 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c36:	4b3b      	ldr	r3, [pc, #236]	@ (8003d24 <xTaskPriorityDisinherit+0x104>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d00b      	beq.n	8003c58 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	60fb      	str	r3, [r7, #12]
}
 8003c52:	bf00      	nop
 8003c54:	bf00      	nop
 8003c56:	e7fd      	b.n	8003c54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10b      	bne.n	8003c78 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	60bb      	str	r3, [r7, #8]
}
 8003c72:	bf00      	nop
 8003c74:	bf00      	nop
 8003c76:	e7fd      	b.n	8003c74 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c7c:	1e5a      	subs	r2, r3, #1
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d044      	beq.n	8003d18 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d140      	bne.n	8003d18 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe fb9c 	bl	80023d8 <uxListRemove>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d115      	bne.n	8003cd2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003caa:	491f      	ldr	r1, [pc, #124]	@ (8003d28 <xTaskPriorityDisinherit+0x108>)
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10a      	bne.n	8003cd2 <xTaskPriorityDisinherit+0xb2>
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	4b18      	ldr	r3, [pc, #96]	@ (8003d2c <xTaskPriorityDisinherit+0x10c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	4a17      	ldr	r2, [pc, #92]	@ (8003d2c <xTaskPriorityDisinherit+0x10c>)
 8003cd0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cde:	f1c3 0207 	rsb	r2, r3, #7
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cea:	2201      	movs	r2, #1
 8003cec:	409a      	lsls	r2, r3
 8003cee:	4b0f      	ldr	r3, [pc, #60]	@ (8003d2c <xTaskPriorityDisinherit+0x10c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8003d2c <xTaskPriorityDisinherit+0x10c>)
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4a08      	ldr	r2, [pc, #32]	@ (8003d28 <xTaskPriorityDisinherit+0x108>)
 8003d06:	441a      	add	r2, r3
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	f7fe fb05 	bl	800231e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d14:	2301      	movs	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d18:	697b      	ldr	r3, [r7, #20]
	}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	200002d8 	.word	0x200002d8
 8003d28:	200002dc 	.word	0x200002dc
 8003d2c:	200003e0 	.word	0x200003e0

08003d30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d079      	beq.n	8003e3c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10b      	bne.n	8003d68 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8003d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	60fb      	str	r3, [r7, #12]
}
 8003d62:	bf00      	nop
 8003d64:	bf00      	nop
 8003d66:	e7fd      	b.n	8003d64 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d902      	bls.n	8003d78 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	e002      	b.n	8003d7e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d059      	beq.n	8003e3c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d154      	bne.n	8003e3c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003d92:	4b2c      	ldr	r3, [pc, #176]	@ (8003e44 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d10b      	bne.n	8003db4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	60bb      	str	r3, [r7, #8]
}
 8003dae:	bf00      	nop
 8003db0:	bf00      	nop
 8003db2:	e7fd      	b.n	8003db0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	db04      	blt.n	8003dd2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f1c3 0207 	rsb	r2, r3, #7
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	6959      	ldr	r1, [r3, #20]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4a19      	ldr	r2, [pc, #100]	@ (8003e48 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003de2:	4413      	add	r3, r2
 8003de4:	4299      	cmp	r1, r3
 8003de6:	d129      	bne.n	8003e3c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	3304      	adds	r3, #4
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fe faf3 	bl	80023d8 <uxListRemove>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10a      	bne.n	8003e0e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43da      	mvns	r2, r3
 8003e04:	4b11      	ldr	r3, [pc, #68]	@ (8003e4c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	4a10      	ldr	r2, [pc, #64]	@ (8003e4c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003e0c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e12:	2201      	movs	r2, #1
 8003e14:	409a      	lsls	r2, r3
 8003e16:	4b0d      	ldr	r3, [pc, #52]	@ (8003e4c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8003e4c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4a06      	ldr	r2, [pc, #24]	@ (8003e48 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003e2e:	441a      	add	r2, r3
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	3304      	adds	r3, #4
 8003e34:	4619      	mov	r1, r3
 8003e36:	4610      	mov	r0, r2
 8003e38:	f7fe fa71 	bl	800231e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e3c:	bf00      	nop
 8003e3e:	3720      	adds	r7, #32
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	200002d8 	.word	0x200002d8
 8003e48:	200002dc 	.word	0x200002dc
 8003e4c:	200003e0 	.word	0x200003e0

08003e50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003e54:	4b07      	ldr	r3, [pc, #28]	@ (8003e74 <pvTaskIncrementMutexHeldCount+0x24>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003e5c:	4b05      	ldr	r3, [pc, #20]	@ (8003e74 <pvTaskIncrementMutexHeldCount+0x24>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e62:	3201      	adds	r2, #1
 8003e64:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8003e66:	4b03      	ldr	r3, [pc, #12]	@ (8003e74 <pvTaskIncrementMutexHeldCount+0x24>)
 8003e68:	681b      	ldr	r3, [r3, #0]
	}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	200002d8 	.word	0x200002d8

08003e78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e82:	4b29      	ldr	r3, [pc, #164]	@ (8003f28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e88:	4b28      	ldr	r3, [pc, #160]	@ (8003f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe faa2 	bl	80023d8 <uxListRemove>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10b      	bne.n	8003eb2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e9a:	4b24      	ldr	r3, [pc, #144]	@ (8003f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43da      	mvns	r2, r3
 8003ea8:	4b21      	ldr	r3, [pc, #132]	@ (8003f30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4013      	ands	r3, r2
 8003eae:	4a20      	ldr	r2, [pc, #128]	@ (8003f30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003eb0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb8:	d10a      	bne.n	8003ed0 <prvAddCurrentTaskToDelayedList+0x58>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	481a      	ldr	r0, [pc, #104]	@ (8003f34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003eca:	f7fe fa28 	bl	800231e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ece:	e026      	b.n	8003f1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ed8:	4b14      	ldr	r3, [pc, #80]	@ (8003f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d209      	bcs.n	8003efc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ee8:	4b13      	ldr	r3, [pc, #76]	@ (8003f38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	4b0f      	ldr	r3, [pc, #60]	@ (8003f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	f7fe fa36 	bl	8002366 <vListInsert>
}
 8003efa:	e010      	b.n	8003f1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003efc:	4b0f      	ldr	r3, [pc, #60]	@ (8003f3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	4b0a      	ldr	r3, [pc, #40]	@ (8003f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3304      	adds	r3, #4
 8003f06:	4619      	mov	r1, r3
 8003f08:	4610      	mov	r0, r2
 8003f0a:	f7fe fa2c 	bl	8002366 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d202      	bcs.n	8003f1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003f18:	4a09      	ldr	r2, [pc, #36]	@ (8003f40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	6013      	str	r3, [r2, #0]
}
 8003f1e:	bf00      	nop
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	200003dc 	.word	0x200003dc
 8003f2c:	200002d8 	.word	0x200002d8
 8003f30:	200003e0 	.word	0x200003e0
 8003f34:	200003c4 	.word	0x200003c4
 8003f38:	20000394 	.word	0x20000394
 8003f3c:	20000390 	.word	0x20000390
 8003f40:	200003f8 	.word	0x200003f8

08003f44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3b04      	subs	r3, #4
 8003f54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3b04      	subs	r3, #4
 8003f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f023 0201 	bic.w	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	3b04      	subs	r3, #4
 8003f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f74:	4a0c      	ldr	r2, [pc, #48]	@ (8003fa8 <pxPortInitialiseStack+0x64>)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	3b14      	subs	r3, #20
 8003f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3b04      	subs	r3, #4
 8003f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f06f 0202 	mvn.w	r2, #2
 8003f92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3b20      	subs	r3, #32
 8003f98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	08003fad 	.word	0x08003fad

08003fac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003fb6:	4b13      	ldr	r3, [pc, #76]	@ (8004004 <prvTaskExitError+0x58>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbe:	d00b      	beq.n	8003fd8 <prvTaskExitError+0x2c>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	60fb      	str	r3, [r7, #12]
}
 8003fd2:	bf00      	nop
 8003fd4:	bf00      	nop
 8003fd6:	e7fd      	b.n	8003fd4 <prvTaskExitError+0x28>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	60bb      	str	r3, [r7, #8]
}
 8003fea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003fec:	bf00      	nop
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0fc      	beq.n	8003fee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	2000000c 	.word	0x2000000c
	...

08004010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004010:	4b07      	ldr	r3, [pc, #28]	@ (8004030 <pxCurrentTCBConst2>)
 8004012:	6819      	ldr	r1, [r3, #0]
 8004014:	6808      	ldr	r0, [r1, #0]
 8004016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800401a:	f380 8809 	msr	PSP, r0
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f04f 0000 	mov.w	r0, #0
 8004026:	f380 8811 	msr	BASEPRI, r0
 800402a:	4770      	bx	lr
 800402c:	f3af 8000 	nop.w

08004030 <pxCurrentTCBConst2>:
 8004030:	200002d8 	.word	0x200002d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop

08004038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004038:	4808      	ldr	r0, [pc, #32]	@ (800405c <prvPortStartFirstTask+0x24>)
 800403a:	6800      	ldr	r0, [r0, #0]
 800403c:	6800      	ldr	r0, [r0, #0]
 800403e:	f380 8808 	msr	MSP, r0
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f380 8814 	msr	CONTROL, r0
 800404a:	b662      	cpsie	i
 800404c:	b661      	cpsie	f
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	df00      	svc	0
 8004058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800405a:	bf00      	nop
 800405c:	e000ed08 	.word	0xe000ed08

08004060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004066:	4b47      	ldr	r3, [pc, #284]	@ (8004184 <xPortStartScheduler+0x124>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a47      	ldr	r2, [pc, #284]	@ (8004188 <xPortStartScheduler+0x128>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d10b      	bne.n	8004088 <xPortStartScheduler+0x28>
	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	60fb      	str	r3, [r7, #12]
}
 8004082:	bf00      	nop
 8004084:	bf00      	nop
 8004086:	e7fd      	b.n	8004084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004088:	4b3e      	ldr	r3, [pc, #248]	@ (8004184 <xPortStartScheduler+0x124>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a3f      	ldr	r2, [pc, #252]	@ (800418c <xPortStartScheduler+0x12c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d10b      	bne.n	80040aa <xPortStartScheduler+0x4a>
	__asm volatile
 8004092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	613b      	str	r3, [r7, #16]
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop
 80040a8:	e7fd      	b.n	80040a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040aa:	4b39      	ldr	r3, [pc, #228]	@ (8004190 <xPortStartScheduler+0x130>)
 80040ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	22ff      	movs	r2, #255	@ 0xff
 80040ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	4b31      	ldr	r3, [pc, #196]	@ (8004194 <xPortStartScheduler+0x134>)
 80040d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040d2:	4b31      	ldr	r3, [pc, #196]	@ (8004198 <xPortStartScheduler+0x138>)
 80040d4:	2207      	movs	r2, #7
 80040d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040d8:	e009      	b.n	80040ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80040da:	4b2f      	ldr	r3, [pc, #188]	@ (8004198 <xPortStartScheduler+0x138>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3b01      	subs	r3, #1
 80040e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004198 <xPortStartScheduler+0x138>)
 80040e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040ee:	78fb      	ldrb	r3, [r7, #3]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f6:	2b80      	cmp	r3, #128	@ 0x80
 80040f8:	d0ef      	beq.n	80040da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040fa:	4b27      	ldr	r3, [pc, #156]	@ (8004198 <xPortStartScheduler+0x138>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f1c3 0307 	rsb	r3, r3, #7
 8004102:	2b04      	cmp	r3, #4
 8004104:	d00b      	beq.n	800411e <xPortStartScheduler+0xbe>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	60bb      	str	r3, [r7, #8]
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	e7fd      	b.n	800411a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800411e:	4b1e      	ldr	r3, [pc, #120]	@ (8004198 <xPortStartScheduler+0x138>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	4a1c      	ldr	r2, [pc, #112]	@ (8004198 <xPortStartScheduler+0x138>)
 8004126:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004128:	4b1b      	ldr	r3, [pc, #108]	@ (8004198 <xPortStartScheduler+0x138>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004130:	4a19      	ldr	r2, [pc, #100]	@ (8004198 <xPortStartScheduler+0x138>)
 8004132:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	b2da      	uxtb	r2, r3
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800413c:	4b17      	ldr	r3, [pc, #92]	@ (800419c <xPortStartScheduler+0x13c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a16      	ldr	r2, [pc, #88]	@ (800419c <xPortStartScheduler+0x13c>)
 8004142:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004146:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004148:	4b14      	ldr	r3, [pc, #80]	@ (800419c <xPortStartScheduler+0x13c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a13      	ldr	r2, [pc, #76]	@ (800419c <xPortStartScheduler+0x13c>)
 800414e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004152:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004154:	f000 f8da 	bl	800430c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004158:	4b11      	ldr	r3, [pc, #68]	@ (80041a0 <xPortStartScheduler+0x140>)
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800415e:	f000 f8f9 	bl	8004354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004162:	4b10      	ldr	r3, [pc, #64]	@ (80041a4 <xPortStartScheduler+0x144>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a0f      	ldr	r2, [pc, #60]	@ (80041a4 <xPortStartScheduler+0x144>)
 8004168:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800416c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800416e:	f7ff ff63 	bl	8004038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004172:	f7ff fa7f 	bl	8003674 <vTaskSwitchContext>
	prvTaskExitError();
 8004176:	f7ff ff19 	bl	8003fac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	e000ed00 	.word	0xe000ed00
 8004188:	410fc271 	.word	0x410fc271
 800418c:	410fc270 	.word	0x410fc270
 8004190:	e000e400 	.word	0xe000e400
 8004194:	20000404 	.word	0x20000404
 8004198:	20000408 	.word	0x20000408
 800419c:	e000ed20 	.word	0xe000ed20
 80041a0:	2000000c 	.word	0x2000000c
 80041a4:	e000ef34 	.word	0xe000ef34

080041a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	607b      	str	r3, [r7, #4]
}
 80041c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80041c2:	4b10      	ldr	r3, [pc, #64]	@ (8004204 <vPortEnterCritical+0x5c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3301      	adds	r3, #1
 80041c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004204 <vPortEnterCritical+0x5c>)
 80041ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004204 <vPortEnterCritical+0x5c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d110      	bne.n	80041f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004208 <vPortEnterCritical+0x60>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00b      	beq.n	80041f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80041de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	603b      	str	r3, [r7, #0]
}
 80041f0:	bf00      	nop
 80041f2:	bf00      	nop
 80041f4:	e7fd      	b.n	80041f2 <vPortEnterCritical+0x4a>
	}
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	2000000c 	.word	0x2000000c
 8004208:	e000ed04 	.word	0xe000ed04

0800420c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004212:	4b12      	ldr	r3, [pc, #72]	@ (800425c <vPortExitCritical+0x50>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <vPortExitCritical+0x26>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	607b      	str	r3, [r7, #4]
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	e7fd      	b.n	800422e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004232:	4b0a      	ldr	r3, [pc, #40]	@ (800425c <vPortExitCritical+0x50>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3b01      	subs	r3, #1
 8004238:	4a08      	ldr	r2, [pc, #32]	@ (800425c <vPortExitCritical+0x50>)
 800423a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800423c:	4b07      	ldr	r3, [pc, #28]	@ (800425c <vPortExitCritical+0x50>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d105      	bne.n	8004250 <vPortExitCritical+0x44>
 8004244:	2300      	movs	r3, #0
 8004246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	f383 8811 	msr	BASEPRI, r3
}
 800424e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	2000000c 	.word	0x2000000c

08004260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004260:	f3ef 8009 	mrs	r0, PSP
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	4b15      	ldr	r3, [pc, #84]	@ (80042c0 <pxCurrentTCBConst>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	f01e 0f10 	tst.w	lr, #16
 8004270:	bf08      	it	eq
 8004272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427a:	6010      	str	r0, [r2, #0]
 800427c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004280:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004284:	f380 8811 	msr	BASEPRI, r0
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f7ff f9f0 	bl	8003674 <vTaskSwitchContext>
 8004294:	f04f 0000 	mov.w	r0, #0
 8004298:	f380 8811 	msr	BASEPRI, r0
 800429c:	bc09      	pop	{r0, r3}
 800429e:	6819      	ldr	r1, [r3, #0]
 80042a0:	6808      	ldr	r0, [r1, #0]
 80042a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a6:	f01e 0f10 	tst.w	lr, #16
 80042aa:	bf08      	it	eq
 80042ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80042b0:	f380 8809 	msr	PSP, r0
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	f3af 8000 	nop.w

080042c0 <pxCurrentTCBConst>:
 80042c0:	200002d8 	.word	0x200002d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop

080042c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	607b      	str	r3, [r7, #4]
}
 80042e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80042e2:	f7ff f90d 	bl	8003500 <xTaskIncrementTick>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042ec:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <SysTick_Handler+0x40>)
 80042ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	2300      	movs	r3, #0
 80042f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f383 8811 	msr	BASEPRI, r3
}
 80042fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	e000ed04 	.word	0xe000ed04

0800430c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004310:	4b0b      	ldr	r3, [pc, #44]	@ (8004340 <vPortSetupTimerInterrupt+0x34>)
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004316:	4b0b      	ldr	r3, [pc, #44]	@ (8004344 <vPortSetupTimerInterrupt+0x38>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800431c:	4b0a      	ldr	r3, [pc, #40]	@ (8004348 <vPortSetupTimerInterrupt+0x3c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0a      	ldr	r2, [pc, #40]	@ (800434c <vPortSetupTimerInterrupt+0x40>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	099b      	lsrs	r3, r3, #6
 8004328:	4a09      	ldr	r2, [pc, #36]	@ (8004350 <vPortSetupTimerInterrupt+0x44>)
 800432a:	3b01      	subs	r3, #1
 800432c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800432e:	4b04      	ldr	r3, [pc, #16]	@ (8004340 <vPortSetupTimerInterrupt+0x34>)
 8004330:	2207      	movs	r2, #7
 8004332:	601a      	str	r2, [r3, #0]
}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	e000e010 	.word	0xe000e010
 8004344:	e000e018 	.word	0xe000e018
 8004348:	20000000 	.word	0x20000000
 800434c:	10624dd3 	.word	0x10624dd3
 8004350:	e000e014 	.word	0xe000e014

08004354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004354:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004364 <vPortEnableVFP+0x10>
 8004358:	6801      	ldr	r1, [r0, #0]
 800435a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800435e:	6001      	str	r1, [r0, #0]
 8004360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004362:	bf00      	nop
 8004364:	e000ed88 	.word	0xe000ed88

08004368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800436e:	f3ef 8305 	mrs	r3, IPSR
 8004372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b0f      	cmp	r3, #15
 8004378:	d915      	bls.n	80043a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800437a:	4a18      	ldr	r2, [pc, #96]	@ (80043dc <vPortValidateInterruptPriority+0x74>)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4413      	add	r3, r2
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004384:	4b16      	ldr	r3, [pc, #88]	@ (80043e0 <vPortValidateInterruptPriority+0x78>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	7afa      	ldrb	r2, [r7, #11]
 800438a:	429a      	cmp	r2, r3
 800438c:	d20b      	bcs.n	80043a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	607b      	str	r3, [r7, #4]
}
 80043a0:	bf00      	nop
 80043a2:	bf00      	nop
 80043a4:	e7fd      	b.n	80043a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80043a6:	4b0f      	ldr	r3, [pc, #60]	@ (80043e4 <vPortValidateInterruptPriority+0x7c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80043ae:	4b0e      	ldr	r3, [pc, #56]	@ (80043e8 <vPortValidateInterruptPriority+0x80>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d90b      	bls.n	80043ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80043b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	603b      	str	r3, [r7, #0]
}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop
 80043cc:	e7fd      	b.n	80043ca <vPortValidateInterruptPriority+0x62>
	}
 80043ce:	bf00      	nop
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	e000e3f0 	.word	0xe000e3f0
 80043e0:	20000404 	.word	0x20000404
 80043e4:	e000ed0c 	.word	0xe000ed0c
 80043e8:	20000408 	.word	0x20000408

080043ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08a      	sub	sp, #40	@ 0x28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80043f8:	f7fe ffd6 	bl	80033a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80043fc:	4b5c      	ldr	r3, [pc, #368]	@ (8004570 <pvPortMalloc+0x184>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004404:	f000 f924 	bl	8004650 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004408:	4b5a      	ldr	r3, [pc, #360]	@ (8004574 <pvPortMalloc+0x188>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4013      	ands	r3, r2
 8004410:	2b00      	cmp	r3, #0
 8004412:	f040 8095 	bne.w	8004540 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01e      	beq.n	800445a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800441c:	2208      	movs	r2, #8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4413      	add	r3, r2
 8004422:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	2b00      	cmp	r3, #0
 800442c:	d015      	beq.n	800445a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f023 0307 	bic.w	r3, r3, #7
 8004434:	3308      	adds	r3, #8
 8004436:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <pvPortMalloc+0x6e>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	617b      	str	r3, [r7, #20]
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop
 8004458:	e7fd      	b.n	8004456 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d06f      	beq.n	8004540 <pvPortMalloc+0x154>
 8004460:	4b45      	ldr	r3, [pc, #276]	@ (8004578 <pvPortMalloc+0x18c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	429a      	cmp	r2, r3
 8004468:	d86a      	bhi.n	8004540 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800446a:	4b44      	ldr	r3, [pc, #272]	@ (800457c <pvPortMalloc+0x190>)
 800446c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800446e:	4b43      	ldr	r3, [pc, #268]	@ (800457c <pvPortMalloc+0x190>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004474:	e004      	b.n	8004480 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004478:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800447a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	429a      	cmp	r2, r3
 8004488:	d903      	bls.n	8004492 <pvPortMalloc+0xa6>
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f1      	bne.n	8004476 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004492:	4b37      	ldr	r3, [pc, #220]	@ (8004570 <pvPortMalloc+0x184>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004498:	429a      	cmp	r2, r3
 800449a:	d051      	beq.n	8004540 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2208      	movs	r2, #8
 80044a2:	4413      	add	r3, r2
 80044a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	1ad2      	subs	r2, r2, r3
 80044b6:	2308      	movs	r3, #8
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d920      	bls.n	8004500 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4413      	add	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00b      	beq.n	80044e8 <pvPortMalloc+0xfc>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	613b      	str	r3, [r7, #16]
}
 80044e2:	bf00      	nop
 80044e4:	bf00      	nop
 80044e6:	e7fd      	b.n	80044e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	1ad2      	subs	r2, r2, r3
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80044fa:	69b8      	ldr	r0, [r7, #24]
 80044fc:	f000 f90a 	bl	8004714 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004500:	4b1d      	ldr	r3, [pc, #116]	@ (8004578 <pvPortMalloc+0x18c>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	4a1b      	ldr	r2, [pc, #108]	@ (8004578 <pvPortMalloc+0x18c>)
 800450c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800450e:	4b1a      	ldr	r3, [pc, #104]	@ (8004578 <pvPortMalloc+0x18c>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b1b      	ldr	r3, [pc, #108]	@ (8004580 <pvPortMalloc+0x194>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d203      	bcs.n	8004522 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800451a:	4b17      	ldr	r3, [pc, #92]	@ (8004578 <pvPortMalloc+0x18c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a18      	ldr	r2, [pc, #96]	@ (8004580 <pvPortMalloc+0x194>)
 8004520:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	4b13      	ldr	r3, [pc, #76]	@ (8004574 <pvPortMalloc+0x188>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	431a      	orrs	r2, r3
 800452c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004536:	4b13      	ldr	r3, [pc, #76]	@ (8004584 <pvPortMalloc+0x198>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3301      	adds	r3, #1
 800453c:	4a11      	ldr	r2, [pc, #68]	@ (8004584 <pvPortMalloc+0x198>)
 800453e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004540:	f7fe ff40 	bl	80033c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <pvPortMalloc+0x17a>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	60fb      	str	r3, [r7, #12]
}
 8004560:	bf00      	nop
 8004562:	bf00      	nop
 8004564:	e7fd      	b.n	8004562 <pvPortMalloc+0x176>
	return pvReturn;
 8004566:	69fb      	ldr	r3, [r7, #28]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3728      	adds	r7, #40	@ 0x28
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20004014 	.word	0x20004014
 8004574:	20004028 	.word	0x20004028
 8004578:	20004018 	.word	0x20004018
 800457c:	2000400c 	.word	0x2000400c
 8004580:	2000401c 	.word	0x2000401c
 8004584:	20004020 	.word	0x20004020

08004588 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d04f      	beq.n	800463a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800459a:	2308      	movs	r3, #8
 800459c:	425b      	negs	r3, r3
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4413      	add	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	4b25      	ldr	r3, [pc, #148]	@ (8004644 <vPortFree+0xbc>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4013      	ands	r3, r2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10b      	bne.n	80045ce <vPortFree+0x46>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	60fb      	str	r3, [r7, #12]
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	e7fd      	b.n	80045ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <vPortFree+0x66>
	__asm volatile
 80045d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	60bb      	str	r3, [r7, #8]
}
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop
 80045ec:	e7fd      	b.n	80045ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	4b14      	ldr	r3, [pc, #80]	@ (8004644 <vPortFree+0xbc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01e      	beq.n	800463a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d11a      	bne.n	800463a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	4b0e      	ldr	r3, [pc, #56]	@ (8004644 <vPortFree+0xbc>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	43db      	mvns	r3, r3
 800460e:	401a      	ands	r2, r3
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004614:	f7fe fec8 	bl	80033a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	4b0a      	ldr	r3, [pc, #40]	@ (8004648 <vPortFree+0xc0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4413      	add	r3, r2
 8004622:	4a09      	ldr	r2, [pc, #36]	@ (8004648 <vPortFree+0xc0>)
 8004624:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004626:	6938      	ldr	r0, [r7, #16]
 8004628:	f000 f874 	bl	8004714 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800462c:	4b07      	ldr	r3, [pc, #28]	@ (800464c <vPortFree+0xc4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3301      	adds	r3, #1
 8004632:	4a06      	ldr	r2, [pc, #24]	@ (800464c <vPortFree+0xc4>)
 8004634:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004636:	f7fe fec5 	bl	80033c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800463a:	bf00      	nop
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20004028 	.word	0x20004028
 8004648:	20004018 	.word	0x20004018
 800464c:	20004024 	.word	0x20004024

08004650 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004656:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800465a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800465c:	4b27      	ldr	r3, [pc, #156]	@ (80046fc <prvHeapInit+0xac>)
 800465e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00c      	beq.n	8004684 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3307      	adds	r3, #7
 800466e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0307 	bic.w	r3, r3, #7
 8004676:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	4a1f      	ldr	r2, [pc, #124]	@ (80046fc <prvHeapInit+0xac>)
 8004680:	4413      	add	r3, r2
 8004682:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004688:	4a1d      	ldr	r2, [pc, #116]	@ (8004700 <prvHeapInit+0xb0>)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800468e:	4b1c      	ldr	r3, [pc, #112]	@ (8004700 <prvHeapInit+0xb0>)
 8004690:	2200      	movs	r2, #0
 8004692:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	4413      	add	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800469c:	2208      	movs	r2, #8
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0307 	bic.w	r3, r3, #7
 80046aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4a15      	ldr	r2, [pc, #84]	@ (8004704 <prvHeapInit+0xb4>)
 80046b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046b2:	4b14      	ldr	r3, [pc, #80]	@ (8004704 <prvHeapInit+0xb4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2200      	movs	r2, #0
 80046b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046ba:	4b12      	ldr	r3, [pc, #72]	@ (8004704 <prvHeapInit+0xb4>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	1ad2      	subs	r2, r2, r3
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004704 <prvHeapInit+0xb4>)
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004708 <prvHeapInit+0xb8>)
 80046de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	4a09      	ldr	r2, [pc, #36]	@ (800470c <prvHeapInit+0xbc>)
 80046e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046e8:	4b09      	ldr	r3, [pc, #36]	@ (8004710 <prvHeapInit+0xc0>)
 80046ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80046ee:	601a      	str	r2, [r3, #0]
}
 80046f0:	bf00      	nop
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	2000040c 	.word	0x2000040c
 8004700:	2000400c 	.word	0x2000400c
 8004704:	20004014 	.word	0x20004014
 8004708:	2000401c 	.word	0x2000401c
 800470c:	20004018 	.word	0x20004018
 8004710:	20004028 	.word	0x20004028

08004714 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800471c:	4b28      	ldr	r3, [pc, #160]	@ (80047c0 <prvInsertBlockIntoFreeList+0xac>)
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e002      	b.n	8004728 <prvInsertBlockIntoFreeList+0x14>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	429a      	cmp	r2, r3
 8004730:	d8f7      	bhi.n	8004722 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	4413      	add	r3, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	429a      	cmp	r2, r3
 8004742:	d108      	bne.n	8004756 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	441a      	add	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	441a      	add	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d118      	bne.n	800479c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b15      	ldr	r3, [pc, #84]	@ (80047c4 <prvInsertBlockIntoFreeList+0xb0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d00d      	beq.n	8004792 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	441a      	add	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	e008      	b.n	80047a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004792:	4b0c      	ldr	r3, [pc, #48]	@ (80047c4 <prvInsertBlockIntoFreeList+0xb0>)
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	e003      	b.n	80047a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d002      	beq.n	80047b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047b2:	bf00      	nop
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	2000400c 	.word	0x2000400c
 80047c4:	20004014 	.word	0x20004014

080047c8 <memset>:
 80047c8:	4402      	add	r2, r0
 80047ca:	4603      	mov	r3, r0
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d100      	bne.n	80047d2 <memset+0xa>
 80047d0:	4770      	bx	lr
 80047d2:	f803 1b01 	strb.w	r1, [r3], #1
 80047d6:	e7f9      	b.n	80047cc <memset+0x4>

080047d8 <__libc_init_array>:
 80047d8:	b570      	push	{r4, r5, r6, lr}
 80047da:	4d0d      	ldr	r5, [pc, #52]	@ (8004810 <__libc_init_array+0x38>)
 80047dc:	4c0d      	ldr	r4, [pc, #52]	@ (8004814 <__libc_init_array+0x3c>)
 80047de:	1b64      	subs	r4, r4, r5
 80047e0:	10a4      	asrs	r4, r4, #2
 80047e2:	2600      	movs	r6, #0
 80047e4:	42a6      	cmp	r6, r4
 80047e6:	d109      	bne.n	80047fc <__libc_init_array+0x24>
 80047e8:	4d0b      	ldr	r5, [pc, #44]	@ (8004818 <__libc_init_array+0x40>)
 80047ea:	4c0c      	ldr	r4, [pc, #48]	@ (800481c <__libc_init_array+0x44>)
 80047ec:	f000 f826 	bl	800483c <_init>
 80047f0:	1b64      	subs	r4, r4, r5
 80047f2:	10a4      	asrs	r4, r4, #2
 80047f4:	2600      	movs	r6, #0
 80047f6:	42a6      	cmp	r6, r4
 80047f8:	d105      	bne.n	8004806 <__libc_init_array+0x2e>
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004800:	4798      	blx	r3
 8004802:	3601      	adds	r6, #1
 8004804:	e7ee      	b.n	80047e4 <__libc_init_array+0xc>
 8004806:	f855 3b04 	ldr.w	r3, [r5], #4
 800480a:	4798      	blx	r3
 800480c:	3601      	adds	r6, #1
 800480e:	e7f2      	b.n	80047f6 <__libc_init_array+0x1e>
 8004810:	080048c4 	.word	0x080048c4
 8004814:	080048c4 	.word	0x080048c4
 8004818:	080048c4 	.word	0x080048c4
 800481c:	080048c8 	.word	0x080048c8

08004820 <memcpy>:
 8004820:	440a      	add	r2, r1
 8004822:	4291      	cmp	r1, r2
 8004824:	f100 33ff 	add.w	r3, r0, #4294967295
 8004828:	d100      	bne.n	800482c <memcpy+0xc>
 800482a:	4770      	bx	lr
 800482c:	b510      	push	{r4, lr}
 800482e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004832:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004836:	4291      	cmp	r1, r2
 8004838:	d1f9      	bne.n	800482e <memcpy+0xe>
 800483a:	bd10      	pop	{r4, pc}

0800483c <_init>:
 800483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483e:	bf00      	nop
 8004840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004842:	bc08      	pop	{r3}
 8004844:	469e      	mov	lr, r3
 8004846:	4770      	bx	lr

08004848 <_fini>:
 8004848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484a:	bf00      	nop
 800484c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484e:	bc08      	pop	{r3}
 8004850:	469e      	mov	lr, r3
 8004852:	4770      	bx	lr
